/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var imageCollection = ee.ImageCollection("CIESIN/GPWv411/GPW_Population_Count");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/* 
Load modules
---------------------------------------------------------------------------------------------------- 
*/ 
//var utils = require('users/giswqs/public:Modules/utils');
var datasets = require('users/stormwaterheatmap/Modules:datasets');
var charts = require('users/stormwaterheatmap/Modules:chart');
var palettes = require('users/gena/packages:palettes');
var legends = require('users/stormwaterheatmap/Modules:legends');
var mapStyle = require('users/stormwaterheatmap/Modules:mapStyles')

/* 
Load vectors
---------------------------------------------------------------------------------------------------- 
*/ 
var HUC12 = datasets.HUC12
var NHDPlus = datasets.NHDPlus
var studyArea = datasets.PugetSound
var WRIA = datasets.WRIA
var PSAU = datasets.PS_AU


/*
Load images into a dictionary
---------------------------------------------------------------------------------------------------- 
*/ 
var layerProperties = {
    'Precipitation': {
        layer: datasets.NASA_precip,
        LegendName: ['Mean Annual Preciptation, mm/year'],
        palette: palettes.misc.jet[7],
        discrete: false,
        vizType: 'histogram'
    },
    'Soils': {
        layer: datasets.soils,
        layerName: ['Hydrologic Soils Group'], 
          palette: ['#69995D', '#564138', '#F06543', '#7FFF7F', '#05668D'],
          discrete: true, 
          minMax: [0,4],
          values: [0, 1, 2, 3, 4], 
          labels: ['A/B', 'C', 'D', 'water', 'Water'],
          vizType: 'pieChart'
            },
    
        
    'Slopes': {
        layer: datasets.slopes,
        palette: ['yellow', 'orange', 'red'],
        legend: [
            { '2016': 'red' }, { '...': 'orange' }, { '2000': 'yellow' },
            { 'No loss': 'black' }, { 'Water or no data': 'grey' }
        ]
    },
    'Land Cover': {
        layer: datasets.landcover,
        palette: ['yellow', 'orange', 'red'],
        legend: [
            { '2016': 'red' }, { '...': 'orange' }, { '2000': 'yellow' },
            { 'No loss': 'black' }, { 'Water or no data': 'grey' }
        ]
    },
    'HRUs': {
        layer: datasets.HRUBands,
        palette: ['yellow', 'orange', 'red'],
        legend: [
            { '2016': 'red' }, { '...': 'orange' }, { '2000': 'yellow' },
            { 'No loss': 'black' }, { 'Water or no data': 'grey' }
        ]
    },
    'Population': {
        layer: datasets.population,
        palette: ['yellow', 'orange', 'red'],
        legend: [
            { '2016': 'red' }, { '...': 'orange' }, { '2000': 'yellow' },
            { 'No loss': 'black' }, { 'Water or no data': 'grey' }
        ]
    },
}

/*
Style defaults 
---------------------------------------------------------------------------------------------------- 
*/
var colors = { 'cyan': '#24C1E0', 'transparent': '#11ffee00', 'gray': '#F8F9FA', 'white': '#ffffff' };

var TITLE_STYLE = {
    fontWeight: '300',
    fontSize: '32px',
    padding: '10px',
    //color: '#616161',
    backgroundColor: colors.white,
};

var PARAGRAPH_STYLE = {
    fontSize: '14px',
    //fontWeight: '100',
    //color: '#9E9E9E',
    padding: '8px',
    backgroundColor: colors.white,
};

var LABEL_STYLE = {
    fontWeight: '100',
    textAlign: 'center',
    fontSize: '11px',
    backgroundColor: colors.white,
};

var BORDER_STYLE = '4px solid rgba(97, 97, 97, 0.05)'

var BUTTON_STYLE = {
    //color: 'white',
    //backgroundColor: "green", /* Green */
    border: 'none',
    //color: 'white',
    //padding: '15px',
    //text-align: center;
    //text-decoration: none;
    //display: inline-block;
    // fontSize: '16px',
    //fontWeight: '50',
    //stretch: 'horizontal'
};
//Create a dictionary of layers and descriptions 
// Use curly brackets {} to make a dictionary of key:value pairs.
/* 
Map Styles 
---------------------------------------------------------------------------------------------------- 
*/ 


/*
Global Variables 
*/ 

var clicked_basin
var WS
/* 
Functions 
---------------------------------------------------------------------------------------------------- 
*/  
//helper function for dictionary lookup
function findWithAttr(array, attr, value) {
    for (var i = 0; i < array.length; i += 1) {
        if (array[i][attr] === value) {
            return i;
        }
    }
    return -1;
}






//function to redraw the map with the selected watershed.     
function redraw() {
    Map.layers().reset()
    
    var layer = watershedSelect.getValue();

    if (layer == 'HUC 12') {
        WS = HUC12;
    } else if (layer == 'NHDPlus') {
        WS = NHDPlus;
    } else if (layer == 'Watershed Assessment Units') {
        WS = PSAU;
    } else if (layer == 'WRIA')
        WS = WRIA;
      else
        WS = null; 
    mapPanel.clear()
    mapPanel.setCenter(mapCenterLon, mapCenterLat, 8)
    mapPanel.setOptions('Dark',{'Dark': mapStyle.GRAYMAP})
    //Map.setOptions('Dark', {'Dark': mapStyle.Dark});
    mapPanel.addLayer(WS, {}, 'layer name')
    // handle_map_click(WS)
}


// Create a layer selector pulldown.
// The elements of the pulldown are the keys of the layerProperties dictionary.

var itemNames = ['Precipitation', 'Land Cover/Land Use', 'Population', 'Hydrology', 'Stormwater Pollutants']

var selectItems = itemNames;//TODO Change to list of functions
print(selectItems)
var layerDict = ee.Dictionary(layerProperties);
// Define the pulldown menu.  Changing the pulldown menu changes the map layer
// and legend.

var layerSelect = ui.Select({
    //items: ee.List(layerDict.get('names')),
    items: selectItems,
    placeholder: 'Select a value',
    //value: 'HUC 12'
    onChange:addLayersAndReport
});

//var vizMin
//var vizMax 

//After inspection/selection call functions for layers and reports
function addLayersAndReport() {
  addUserLayer()
  addReports()
}
//Main Function for reports
function addReports() {
  var selected = layerSelect.getValue();
  //display information about report 
  var reportTitle = ui.Label(selected)
  mainPanel.add(reportTitle)
       //add chart
  sidePanel.add(charts.histogramImage(layerProperties.Precipitation.layer,
  clicked_basin,100,layerProperties.Precipitation.LegendName))
}
    
//Main Function for displaying layers     
function addUserLayer() { 
    //Map.layers().reset()
    mapPanel.setOptions('Grey',{'Grey': mapStyle.GRAYMAP})
    var selected = layerSelect.getValue();
    var userLayer = layerProperties[selected]
    print("Layer to be clipped:", userLayer)
    var image = clipBasin(userLayer.layer);
    var name = selected
    var pal = userLayer.palette
    //print(image)
    //print(name)
    //show the loading label
    mapPanel.add(ui.Label({
      value: 'Loading...',
      style: {color:'gray'}
          })
          )
    //  
    //determine the min and max for display
    var minmax = image.reduceRegion({reducer: ee.Reducer.minMax(),
    scale: 1000}).values()
    //Request min and max from server
    minmax.evaluate(function(result) {
      //When the server returns the value, show it
      print(result)
    //var viz = result.sort()  
    var vizMax = result[0].toFixed() 
    var vizMin =  result[1].toFixed()  
    print('vizMax:' , vizMax)
     print('vizMin:' , vizMin)
    //add the clipped image
    mapPanel.addLayer(image, 
    { min: vizMin, max: vizMax, palette:userLayer.palette}, 
      name)
    //add the map panel and legend  
     mapPanel.add(  
  ui.Panel(
  [
    ui.Label(userLayer.LegendName),
    ui.Label('opacity'), 
    ui.Slider(), //empty slider for now
    legends.barLegend(vizMin, null, vizMax,userLayer.palette),
    ],
    ui.Panel.Layout.flow('vertical'),
    {position: 'bottom-left'})); 
     
     
  
      
    })
    //remove Loading label
    //TODO
    //add legend 
   
    // handle_map_click(WS)
}

var buttonPanel = ui.Panel({
    layout: ui.Panel.Layout.flow('horizontal', true),
    style: {
        //stretch: 'both',
        //height: '100px',
        //width: '400px',
        backgroundColor: colors.white,
        //border: BORDER_STYLE,
    }
});

//var label = 'choose a watershed and activate inspector'
//var inspectorHelperPanel = new ui.Panel(label);
//var inspectHelperTitle = 'Click on a watershed'


function handle_map_click(location) {
    // get clicked subbasin info
    // var selected_WS = watershedSelect.getValue()
    //var selected_WS = WS;
    // print(selected_WS)
    //mapPanel.addLayer(WS)
    var clicked_point = ee.Geometry.Point(location.lon, location.lat);
    var clicked_basin_fc = WS.filterBounds(clicked_point);
    clicked_basin = ee.Feature(clicked_basin_fc.first());
    var clicked_basin_geom = clicked_basin.geometry();
    print('Click')
    print(clicked_point),
        print('Clicked Basin', clicked_basin)
    mapPanel.clear()
    mapPanel.style().set({cursor: 'hand'});
    mapPanel.addLayer(clicked_basin)
    mapPanel.centerObject(clicked_basin)

    //add layer dropdown 
    mainPanel.add(layerSelect)
    addUserLayer(clicked_basin)
    //mapPanel.addLayer(precip.clip(clicked_basin),{},'Precipitation',false)
    //mapPanel.addLayer(landcover.clip(clicked_basin,{},'Land Cover',false))
    //var hruBandsclipped = hruBands.clip(clicked_basin)
    //var hruChart = ui.Chart.image.byRegion(hruBandsclipped)
    //mainPanel.add(hruChart)
    //var precipChart = ui.Chart.image.regions(precip)
    //mainPanel.add(precipChart)

}

function handle_inspect_click() {
    print('inspector Activated')
    mapPanel.style().set({cursor: 'crosshair'});
    var selected_WS = watershedSelect.getValue();
    print(selected_WS)
    mapPanel.onClick(handle_map_click)
}

var inspect_button = ui.Button({
    label: 'Activate inspector',
    onClick: handle_inspect_click
})
var image
//function to add user layer to the map


function clipBasin(imageToClip) {
    var clippedImage = imageToClip.clip(clicked_basin)
    return clippedImage
}

var deactiv_button = ui.Button({
    label: 'Reset Map',
    style: BUTTON_STYLE, 
    onClick: mapReset,//also clear side panel 
});

//UI functions
function makeSidePanel() {
    // Create the base side panel, into which other widgets will be added
    mainPanel.add(titleLabel);
    mainPanel.add(descriptionLabel);
    mainPanel.add(watershedSelectLabel);
    mainPanel.add(watershedSelect);
    mainPanel.add(buttonPanel);
    buttonPanel.add(inspect_button)
    buttonPanel.add(deactiv_button)
    return mainPanel;
}

/** Returns a ui.Map with some UI configuration in place */
function makeMapPanel() {
    var map = ui.Map();
    // Add an informational label
    
    // Don't show the layer list for this app.
    map.setControlVisibility({ layerList: false });
    map.setOptions('Grey',{'Grey': mapStyle.GRAYMAP})  
    return map;
}

/* 
Set up User Interface
----------------------------------------------------------------------------------------------------
*/ 
//Lay out main panel 
var mainPanel = ui.Panel({
    layout: ui.Panel.Layout.flow('vertical', true),
    style: {
        stretch: 'horizontal',
        height: '100%',
        width: '550px',
        backgroundColor: colors.white,
        border: BORDER_STYLE,
    }
});

// Add the app title and information 
var titleLabel = ui.Label('Watershed Inspector', TITLE_STYLE);
var descriptionText =
    'This app allows you to interactively explore heatmap data by watershed.'
var descriptionLabel = ui.Label(descriptionText, PARAGRAPH_STYLE);
var watershedSelectLabel = ui.Label({
    value: 'Select a watershed dataset:',
    style: PARAGRAPH_STYLE
});

//set up watershed drop down menu     
var watershedSelect = ui.Select({
    items: ['HUC 12', 'NHDPlus','WRIA'],
    placeholder: 'Select a value',
    //value: 'HUC 12'
    onChange: redraw
});



function mapReset(){
  Map.layers().reset()
  mapPanel.clear()
  mainPanel.clear()
  
  mapPanel.setCenter(mapCenterLon, mapCenterLat, 8)
  mapPanel.setOptions('Dark',{'Dark': mapStyle.GRAYMAP})
    //Map.setOptions('Dark', {'Dark': mapStyle.Dark});
  //redraw()
}

 // Clear the default UI 
  ui.root.clear();



// Create the app's two panels and add them to the ui.root as a split panel
var sidePanel = makeSidePanel();
var mapPanel = makeMapPanel();
ui.root.add(ui.SplitPanel(sidePanel, mapPanel));




var mapCenterLon = -122.423145
var mapCenterLat = 47.612410
redraw()


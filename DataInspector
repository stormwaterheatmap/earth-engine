/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var imageCollection = ee.ImageCollection("CIESIN/GPWv4/population-count");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Load modules
//var utils = require('users/giswqs/public:Modules/utils');
var datasets = require('users/stormwaterheatmap/Modules:datasets');
var charts = require('users/stormwaterheatmap/Modules:chart');

//Load vectors 
var HUC12 = datasets.HUC12
var NHDPlus = datasets.NHDPlus
var studyArea = datasets.PugetSound
var WRIA = datasets.WRIA
var PSAU = datasets.PS_AU
//Load images
var precip = datasets.precip
var soils = datasets.soils
var slope = datasets.slope 
var landcover = datasets.landcover
var hruBands = datasets.hruBands

var mapCenterLon = -122.423145
var mapCenterLat = 47.612410

//var 

// Style defaults 
// ---------------------------------------------------------------------------------------------------- //
var colors = { 'cyan': '#24C1E0', 'transparent': '#11ffee00', 'gray': '#F8F9FA', 'white': '#ffffff' };

var TITLE_STYLE = {
    fontWeight: '300',
    fontSize: '32px',
    padding: '10px',
    //color: '#616161',
    backgroundColor: colors.white,
};

var PARAGRAPH_STYLE = {
    fontSize: '14px',
    //fontWeight: '100',
    //color: '#9E9E9E',
    padding: '8px',
    backgroundColor: colors.white,
};

var LABEL_STYLE = {
    fontWeight: '100',
    textAlign: 'center',
    fontSize: '11px',
    backgroundColor: colors.white,
};

var BORDER_STYLE = '4px solid rgba(97, 97, 97, 0.05)'

var BUTTON_STYLE = {
    //color: 'white',
    //backgroundColor: "green", /* Green */
    border: 'none',
    //color: 'white',
    //padding: '15px',
    //text-align: center;
    //text-decoration: none;
    //display: inline-block;
    // fontSize: '16px',
    //fontWeight: '50',
    //stretch: 'horizontal'
};

// ---------------------------------------------------------------------------------------------------- //
// UI
// ---------------------------------------------------------------------------------------------------- //
///UI Helper functions 
//redraw function redraws map based on watershed selected. 

//UI Variables
var mainPanel = ui.Panel({
    layout: ui.Panel.Layout.flow('vertical', true),
    style: {
        stretch: 'horizontal',
        height: '100%',
        width: '550px',
        backgroundColor: colors.white,
        border: BORDER_STYLE,
    }
});

// Add the app title to the side panel
var titleLabel = ui.Label('Watershed Inspector', TITLE_STYLE);
var descriptionText =
    'This app allows you to interactively explore heatmap data by watershed.'
var descriptionLabel = ui.Label(descriptionText, PARAGRAPH_STYLE);
var watershedSelectLabel = ui.Label({
    value: 'Select a watershed dataset:',
    style: PARAGRAPH_STYLE
    });

//set up watershed drop down menu     
var watershedSelect = ui.Select({ 
    items: ['HUC 12', 'NHDPlus', 'Watershed Assessment Units', 'WRIA'],
    placeholder: 'Select a value',
    //value: 'HUC 12'
    onChange: redraw
  }); 
  
var WS
  
//function to redraw the map with the selected watershed.     
function redraw() {
  Map.layers().reset()
  var layer = watershedSelect.getValue();
  
  if (layer =='HUC 12') {
    WS = HUC12;
  } else if (layer =='NHDPlus') {
    WS = NHDPlus; 
  } else if (layer == 'Watershed Assessment Units') {
    WS = PSAU;
  } else if (layer == 'WRIA')
    WS = WRIA; 
  mapPanel.clear()
  mapPanel.setCenter(mapCenterLon, mapCenterLat, 8)
  mapPanel.addLayer(WS,{},'layer name')
 // handle_map_click(WS)
  }
  
  
var layerSelect = ui.Select({ 
    items: ['Precipitation', 'Land Use', 'Landcover', 'Soils', 'Slope'],
    placeholder: 'Select a value',
    //value: 'HUC 12'
    onChange: addUserLayer
  }); 
  

  
//function to add user layer to the map
function addUserLayer() {
  //Map.layers().reset()
  var layer = layerSelect.getValue();
  print(layer)
  if (layer =='Precipitation') {
  var  image = precip;
    } 
  mapPanel.addLayer(image) //todo: need to clip to ws 
 // handle_map_click(WS)
  }  

var buttonPanel = ui.Panel({
    layout: ui.Panel.Layout.flow('horizontal', true),
    style: {
        //stretch: 'both',
        //height: '100px',
        //width: '400px',
        backgroundColor: colors.white,
        //border: BORDER_STYLE,
    }
});

//var label = 'choose a watershed and activate inspector'
//var inspectorHelperPanel = new ui.Panel(label);
//var inspectHelperTitle = 'Click on a watershed'

      
var handle_map_click = function(location) {    
        // get clicked subbasin info
       // var selected_WS = watershedSelect.getValue()
       //var selected_WS = WS;
      // print(selected_WS)
      //mapPanel.addLayer(WS)
        var clicked_point      = ee.Geometry.Point(location.lon, location.lat);
        var clicked_basin_fc   = WS.filterBounds(clicked_point);
        var clicked_basin      = ee.Feature(clicked_basin_fc.first());
        var clicked_basin_geom = clicked_basin.geometry();
        print('Click')
        print(clicked_point),
        mapPanel.clear()
        mapPanel.addLayer(clicked_basin)
        mapPanel.centerObject(clicked_basin)
        
        //add layer dropdown 
        mainPanel.add(layerSelect)
        //mapPanel.addLayer(precip.clip(clicked_basin),{},'Precipitation',false)
        //mapPanel.addLayer(landcover.clip(clicked_basin,{},'Land Cover',false))
        //var hruBandsclipped = hruBands.clip(clicked_basin)
        //var hruChart = ui.Chart.image.byRegion(hruBandsclipped)
        //mainPanel.add(hruChart)
        //var precipChart = ui.Chart.image.regions(precip)
        //mainPanel.add(precipChart)
        
}

var handle_inspect_click = function() {
      print('inspector Activated')
      var selected_WS = watershedSelect.getValue();
      print(selected_WS)
      mapPanel.onClick(handle_map_click)
} 

var inspect_button = ui.Button({ 
    label: 'Activate inspector',
    onClick: handle_inspect_click 
}) 


 

var deactiv_button = ui.Button({
    label: 'Deactivate inspector',
    style: BUTTON_STYLE
});

//UI functions
function makeSidePanel() {
    // Create the base side panel, into which other widgets will be added
    mainPanel.add(titleLabel);
    mainPanel.add(descriptionLabel);
    mainPanel.add(watershedSelectLabel);
    mainPanel.add(watershedSelect); 
    mainPanel.add(buttonPanel);
    buttonPanel.add(inspect_button)
    buttonPanel.add(deactiv_button)
    return mainPanel;
}

/** Returns a ui.Map with some UI configuration in place */
function makeMapPanel() {
    var map = ui.Map();
    // Add an informational label
    map.style().set('cursor', 'crosshair');
    // Don't show the layer list for this app.
    map.setControlVisibility({ layerList: true });
    
    return map;
}

// Clear the default UI since we're adding our own side and map panels.
ui.root.clear();

// Create the app's two panels and add them to the ui.root
var sidePanel = makeSidePanel();
var mapPanel = makeMapPanel();

// Use a SplitPanel so it's possible to resize the two panels.
ui.root.add(ui.SplitPanel(sidePanel, mapPanel));

//mapPanel.centerObject(studyArea,12); 
//mapPanel.add(studyArea)



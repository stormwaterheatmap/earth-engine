
function drawing_tools_function(layer_object, map){
//import datasets 

//map.drawingTools({shape:'polygon'})//, selected, shown, linked))
var drawingTools = map.drawingTools({shape:'polygon'});

var img = layer_object.layer.eeObject
print(img)
drawingTools.setDrawModes(['polygon', 'rectangle'])
map.setControlVisibility({drawingToolsControl:false} )
//--------------------------
// UI Elements 
//-----------------------

//make drawing button
// button resets drawingtools layeers
// sets draw modes 
// initiates user drawing 
var drawButton = ui.Button({
  label: 'Draw a region',
  onClick: function(){
  //activate drawing tools
  drawingTools.layers().reset()
  drawingTools.setShown(true)
  drawingTools.setShape('polygon')
  //drawingTools.setDrawModes(['polygon', 'rectangle'])
  drawingTools.draw()
}
})

var clearButton = (ui.Button({
  label: 'Clear Geometry',
  onClick: clearDrawings
}))
//slider to control download sacel 
var scaleSelect = ui.Slider(10, 100, 30, 10)

//accept user drawing 
var accept_button = ui.Button({
  label: 'Accept Geometry',
  style: {
    shown: false
  }
})

var title = ui.Label("Draw Area of Interest", {
  fontWeight: "bold"
})




var downloadLabel = ui.Label('Download', {
  shown: false
})

var panel = ui.Panel({
  widgets: [title, accept_button, drawButton, clearButton, downloadLabel],
  style: {
    position: 'bottom-left'
  }
})


//functions 

function map_init() {
  // mapaddLayer(img)
  map.layers().reset()
  map.widgets().reset([panel])
  downloadLabel.style().set({
    shown: false
  })
  map.addLayer(img, layer_object.layer.visParams)
  print(map.layers())

}

var getDrawingTools = function () {
  //activate drawing tools
  drawingTools.layers().reset()
  drawingTools.setShown(true).setDrawModes(['polygon', 'rectangle'])
  drawingTools.draw()
}

function downloadImg() {
  (map.layers().reset())
  //get the current geometry 
  var boundary = drawingTools.layers().get(0).getEeObject()
  map.setControlVisibility({drawingToolsControl:false})
  //map.drawingTools().clear()
  //ui.map.DrawingTools().clear()
 drawingTools.layers().get(0).setShown(false)
 
 // (ui.map.GeometryLayer().geometries().reset())//setShown(false))//.setShown(false)
  var clipedImg = img.clip(boundary)
  map.addLayer(clipedImg,layer_object.layer.visParams)
  map.centerObject(clipedImg)
  var url = clipedImg.getDownloadURL({
      name: 'ee_image',
      scale: 300
    }

  );

  downloadLabel.style().set({
    shown: true
  })
  downloadLabel.setUrl(url)
}
accept_button.onClick(downloadImg)




// Get the layers list.
var layers = drawingTools.layers();


// Use debounce to call the function at most every 100 milliseconds.
drawingTools.onEdit(ui.util.debounce(acceptDrawing, 500));
drawingTools.onDraw(ui.util.debounce(acceptDrawing, 500));
drawingTools.onSelect(ui.util.debounce(acceptDrawing, 500));





function acceptDrawing() {
  //Show accept button 
  accept_button.style().set({
    shown: true
  })
  //On accept button, download img 
}





function clearDrawings() {
  map_init()
  drawingTools.layers().reset()
  accept_button.style().set({shown:false})

}

map_init()

return(map)
}

exports.display_drawing_tools = drawing_tools_function 

var data = require(
  'users/stormwaterheatmap/apps:Modules/datasets'
  ).rasters

var exmap = drawing_tools_function(data["Age of Imperviousness"],ui.Map())

ui.root.clear()
ui.root.add(exmap)

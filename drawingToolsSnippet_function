
function drawing_tools_function(layer_object, map){
//import datasets 
var Style = require(
  'users/stormwaterheatmap/apps:Modules/Style'
  )
//map.drawingTools({shape:'polygon'})//, selected, shown, linked))
var drawingTools = map.drawingTools({shape:'rectangle'});


// ui.Button({label:'OK', 
//   onClick:function(){
//     scale_drop_down.insert(1, ui.Label("OK"))
//   }})
var img = layer_object.layer.eeObject
print(img)
drawingTools.setDrawModes(['polygon', 'rectangle'])
map.setControlVisibility({drawingToolsControl:false} )
//--------------------------
// UI Elements 
//-----------------------

//make drawing button
// button resets drawingtools layeers
// sets draw modes 
// initiates user drawing 
var drawButton = ui.Button({
  label: 'Draw a geometry',
  onClick: function(){
  //activate drawing tools
  drawingTools.layers().reset()
  drawingTools.setShown(true)
  drawingTools.setShape('rectangle')
  //drawingTools.setDrawModes(['polygon', 'rectangle'])
  drawingTools.draw()
}
})

var clearButton = (ui.Button({
  label: 'Clear Geometry',
  onClick: clearDrawings
}))
//slider to control download sacel 
var scaleSelect = ui.Slider(10, 100, 30, 10)

//accept user drawing 
var accept_button = ui.Button({
  label: 'Accept Geometry',
  style: {
    shown: false
  }
})

var title = ui.Label("Draw Area of Interest", {
  fontWeight: "bold"
})
print(Style.fonts.Caption1)
var subtitle = ui.Label("Select 'draw a geometry' to begin drawing")

subtitle.style().set(Style.fonts.Caption2)

var accept_subtitle = ui.Label("Click 'Accept Geometry' to clip image for downloading")

accept_subtitle.style().set(Style.fonts.Caption2).set({shown:false})

var downloadLabel = ui.Label('Download', {
  shown: true
})



var panel = ui.Panel({
  widgets: [title,subtitle, 
    ui.Panel({widgets: [drawButton, clearButton], 
        layout:ui.Panel.Layout.flow('horizontal'), 
          style: ({stretch:'vertical'})}), 
  
  accept_subtitle, accept_button],
  style: {
    position: 'bottom-left'
  }
})

var make_download_link = function(image, scale_val) {
        try { //try to get the download url 
            // 
            var url_value = image.getDownloadURL({
                params: {
                    scale: scale_val
                }
            })
            var label_value = '✔ Download Layer' + ' @ ' + scale_val + ' m/pixel '

        } catch (err) { //if error, return a label
            var label_value = ('✖ Download is too large')
            //targetUrl: url_value

        }
        var label_unit = ui.Label({
            value: label_value,
            targetUrl: url_value
        })
        return (label_unit) //returns ui element
    }



  

  
        // min: 2,
        // max: 200,
        // value: 20,
        // step: 2,
        // disabled:false,
        // style: {
        //     width: "90%"
        // },
        // onChange: function(value) {
        //     print(value)

        // }
  
// })
var line = ui.Panel({style: {border:
  '1px solid whitesmoke'
}})
var download_title = ui.Label({value:"Download Imagery", style:{fontWeight:"bold"}}) ///, targetUrl)
var download_panel = ui.Panel({widgets: [line,download_title,scaleSelect], style:{shown:false, width: 600, minWidth:300}})
 


//functions 

function map_init() {
  // mapaddLayer(img)
  map.layers().reset()
  map.widgets().reset([panel])
  downloadLabel.style().set({
    shown: false
  })
  map.addLayer(img, layer_object.layer.visParams)
  print(map.layers())

}

var getDrawingTools = function () {
  //activate drawing tools
  drawingTools.layers().reset()
  drawingTools.setShown(true).setDrawModes(['polygon', 'rectangle'])
  drawingTools.draw()
}

function downloadImg() {
  (map.layers().reset())
  //get the current geometry 
  var boundary = drawingTools.layers().get(0).getEeObject()
  map.setControlVisibility({drawingToolsControl:false})
  //map.drawingTools().clear()
  //ui.map.DrawingTools().clear()
 drawingTools.layers().get(0).setShown(false)
 
 // (ui.map.GeometryLayer().geometries().reset())//setShown(false))//.setShown(false)
  var clipedImg = img.clip(boundary)
  map.addLayer(clipedImg,layer_object.layer.visParams)
  map.centerObject(clipedImg)
  
  //var download_link = make_download_link(clipedImg,scaleSelect.getValue())
  download_panel.add(
    make_download_link(clipedImg,scaleSelect.getValue())
    )
  
  
  panel.add(download_panel)
  download_panel.style().set({shown:true})
 
  // var url = clipedImg.getDownloadURL({
  //     name: 'ee_image',
  //     scale: 300
  //   }

  // );

  // downloadLabel.style().set({
  //   shown: true
  // })
  // downloadLabel.setUrl(url)
}
accept_button.onClick(downloadImg)




// Get the layers list.
var layers = drawingTools.layers();


// Use debounce to call the function at most every 100 milliseconds.
drawingTools.onEdit(ui.util.debounce(acceptDrawing, 500));
drawingTools.onDraw(ui.util.debounce(acceptDrawing, 500));
drawingTools.onSelect(ui.util.debounce(acceptDrawing, 500));





function acceptDrawing() {
  //show accept instructions 
  accept_subtitle.style().set({
    shown:true
  })
  //Show accept button 
  accept_button.style().set({
    shown: true
  })
  //On accept button, download img 
}





function clearDrawings() {
 // panel.clear()
  map_init()
  download_panel.widgets().reset()
  panel.remove(download_panel)
  drawingTools.layers().reset()
  accept_button.style().set({shown:false})
  accept_subtitle.style().set({shown:false})
  download_panel.style().set({shown:false})

}

map_init()

return(map)
}

exports.display_drawing_tools = drawing_tools_function 

var data = require(
  'users/stormwaterheatmap/apps:Modules/datasets'
  ).rasters

var exmap = drawing_tools_function(data["Age of Imperviousness"],ui.Map())

ui.root.clear()
ui.root.add(exmap)

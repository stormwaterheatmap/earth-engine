exports.histByClass = function (layerObject, scale, geom) {
    var area = ee.Image.pixelArea().divide(10000) //area in hectares 
    var image = ee.Image.cat(area, layerObject.layer.eeObject)
    // Define chart customization options.
    var options = {
        legend: {
            position: 'right'
        },
        lineWidth: 1,
        vAxis: {
            title: 'Hectares'
        },
        title: layerObject.layer.name.concat(' in Watershed'),
        colors: layerObject.layer.visParams.palette,
        theme: 'maximized',// {position: 'right'}
        // legend: 'none'
    };

    var histChart = ( ui.Chart.image.byClass({
            image: image, //
            reducer: ee.Reducer.sum(), 
            classBand: 1,
            region: geom,
            scale: scale,
            classLabels: layerObject.labels,
           // xLabels: ' '
        })
        .setOptions(options)
        )

    return histChart

}
exports.histogramFeature = function (region, propName, buckwidth, title) {
    var chart = ui.Chart.feature
        .histogram({
            features: region,
            property: propName,
            maxBuckets: 16,
            minBucketWidth: buckwidth
        })
        .setOptions({
            title: title
        });
    return chart;
};
exports.histogramImage = function (image, WS, scale, title) {
    var chart = ui.Chart.image
        .histogram({
            image: image,
            region: WS,
            scale: scale,
            maxBuckets: 16
        })
        .setOptions({
            title: title
        });
    return chart;
};
var makePieChart = function (geometry, properties, holeSize) {
    var AOI = geometry;
    var image = properties.layer.eeObject
    var withArea = ee.Image.pixelArea().addBands(image);
    var clipImage = withArea.clip(AOI)
 //////////////////////////////////////////////////////////////
    // Calculations
    //////////////////////////////////////////////////////////////
    var lookup_names = ee.Dictionary.fromLists(
        ee.List(properties.values).map(ee.String),
        properties.labels
    );
    print('lookup names', lookup_names)
    var lookup_palette = ee.Dictionary.fromLists(
        ee.List(properties.values).map(ee.String),
        properties.layer.visParams.palette
    );
    print(ee.List(lookup_palette))
    //////////////////////////////////////////////////////////////   // Helper functions    //////////////////////////////////////////////////////////////
    function createFeature(transition_class_stats) {
        transition_class_stats = ee.Dictionary(transition_class_stats);
        var class_number = transition_class_stats.get('class value');
        var result = {
            transition_class_number: class_number,
            transition_class_name: lookup_names.get(class_number),
            transition_class_palette: lookup_palette.get(class_number),
            area_m2: transition_class_stats.get('sum')
        };
        return ee.Feature(null,
        result); // Creates a feature without a geometry.
    }
    // Create a JSON dictionary that defines piechart colors based on thetransition class palette.
    // https://developers.google.com/chart/interactive/docs/gallery/piechart
    function createPieChartSliceDictionary(fc) {
        return ee.List(fc.aggregate_array("transition_class_palette"))
            .map(function (p) {
                return {
                    'color': p
                };
            })//.getInfo();
    }
    //var classValue = image.get('system:title')
    //print(classValue)
    var reduction_results = clipImage.reduceRegion({
        reducer: ee.Reducer.sum().group({
            groupField: 1,
            groupName: 'class value',
        }),
        geometry: AOI,
        scale: 1,
        bestEffort: true,
    });
    print('reduction_results', reduction_results);
    var roi_stats = ee.List(reduction_results.get('groups'));
    print('roi stats', roi_stats)
    var transition_fc = ee.FeatureCollection(roi_stats.map(createFeature));
    print('transition_fc', transition_fc);
    // Add a summary chart.
    var transition_summary_chart = ui.Chart.feature.byFeature({
            features: transition_fc,
            xProperty: 'transition_class_name',
            yProperties: ['area_m2', 'transition_class_number']
        })
       .setChartType('PieChart')//le')
        .setOptions({
           // title: 'Summary of '.concat(properties.layer.eeObject.name),
            pieHole: holeSize,
            height: '200',
            width: '200',
            pieSliceTextStyle: {color: 'black', padding: '8px'},
            slices: createPieChartSliceDictionary(transition_fc),
            sliceVisibilityThreshold: 0.02
        });

    return (transition_summary_chart);

}

exports.pieChart = makePieChart; 

var style = require('users/stormwaterheatmap/apps:Modules/Style')

exports.bigNumPanel = function (value, units, title, tag, color) {
    var panel = ui.Panel({
        style: {
            width: '33%',
            padding: '10px',
            margin: 0
        }
    }) //.style().set({width: '33%'})
    //ui.root.add(panel)
    var infoLabel = ui.Label({
        value: 'â“˜',
        targetUrl: 'https://github.com/stormwaterheatmap'
    })
    infoLabel.style().set({
        margin: '2px',
        padding: '2px',
        color: 'white',
        backgroundColor: style.colors.transparent,
    })
    var titlePanel = ui.Panel({
        layout: ui.Panel.Layout.flow('horizontal')
    })
    titlePanel.style().set({
        margin: 0,
        padding: 0,
        backgroundColor: color,
        stretch: 'horizontal'
    })
    var card = ui.Panel({
        style: {
            backgroundColor: style.colors.transparent,
            margin: 0,
            //border: "0.5px solid black",
            width: '100%',
            //height: '100px', 
            padding: 0,
        }
    }) //.setLayout(ui.Panel.Layout.absolute())//('horizontal')); 
    var bigNum = ui.Label({
        value: value,
        style: {
            margin: 0,
            padding: '0px 12px 0px 0px',
            fontSize: '48px',
            fontWeight: '700',
            backgroundColor: style.colors.transparent,
            color: 'white',
            //position: 'middle-right', 
            textAlign: 'right',
            stretch: 'horizontal'
        }
    })

    var titleLabel = ui.Label({
        value: title,
        style: style.fonts.Body1
    });
    titleLabel.style().set({
        margin: 0,
        padding: '4px 64px 0px 12px',
        position: 'top-left',
        stretch: 'horizontal',
        color: 'white',
        backgroundColor: color
    });

    var unitsLabel = ui.Label({
        value: units,
        style: {
            margin: '-8px 0px 0px 0px ',
            padding: '0px 14px 4px 0px',
            fontSize: '12px',
            fontWeight: '400',
            backgroundColor: style.colors.transparent,
            color: 'white',
            textAlign: 'right',
            stretch: 'horizontal'
        }
    })
    //make a right-hand-side panel to hold big number and units. 
    var rightPan = ui.Panel({ //layout: ui.Panel.Layout.absolute(), 
        layout: ui.Panel.Layout.flow('vertical'),
        style: { //backgroundColor: style.colors.transparent,
            //textAlign: 'center', 
            //position: 'middle-right',
            margin: 0,
            padding: 0,
            // border: '1px dotted white', 
            backgroundColor: color
        }
    });


    //one more panel to hold the information 
    var outerCard = ui.Panel({
        layout: ui.Panel.Layout.flow('vertical', true),
        style: {
            //border: '1px solid grey', 
            margin: 0,
            padding: 0,
            //backgroundColor: style.colors.tncgreen
        }
    }) //.add(ui.Label('outer Card') )
    var info = ui.Label({
        value: tag,
        style: style.fonts.Caption1
    })

    info.style().set({
        color: style.colors.grey,
        //position: 'bottom-right', 
        textAlign: 'right',
        // fontWeight: '600',
        stretch: 'horizontal',
        //backgroundColor: style.colors.transparent, 
        margin: 0,
        padding: '4px',
    });

    //make panels 
    var makePanels = function () {
        titlePanel.add(titleLabel) //.add(infoLabel)
        rightPan.add(bigNum).add(unitsLabel)
        card.add(titlePanel).add(rightPan)
        outerCard.add(card).add(info)
    }
    /*rightPan.add(bigNum).add(units)
    card.add(title).add(infoLabel).add(rightPan)
    outerCard.add(card).add(info)
    }*/
    makePanels()
    return outerCard
}







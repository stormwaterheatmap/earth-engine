/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = /* color: #d63000 */ee.Geometry.Polygon(
        [[[-122.18688550907996, 47.588485685274044],
          [-122.13882032353308, 47.53659182056817],
          [-122.05814919641182, 47.57734993250728],
          [-122.11684766728308, 47.629223376175645],
          [-122.16903272587683, 47.67547769385542]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var style = require('users/stormwaterheatmap/apps:Modules/Style')
var colors = style.colors
exports.histByClass = function (layerObject, scale, geom) {
    var area = ee.Image.pixelArea().divide(10000) //area in hectares 
    var image = ee.Image.cat(area, layerObject.layer.eeObject)
    // Define chart customization options.
    var options = {
        // chartArea: {width: '100%', height: '80%'},
        legend: {
            position: 'in'
        },
        //titlePosition: 'in', 
        axisTitlesPosition: 'in',
        //hAxis: {textPosition: 'in'}, 
        vAxis: {
            textPosition: 'in'
        }
    };

    var histChart = (ui.Chart.image.byClass({
            image: image, //
            reducer: ee.Reducer.sum(),
            classBand: 1,
            region: geom,
            scale: scale,
            classLabels: layerObject.labels,
            //titleTextStyle: style.fonts.LegendTitle
            //     xLabels: layerObject.labels
        })
        .setOptions(options)
    )
    
   // var stacked = histChart.setOptions({isStacked:true})
    return [histChart]

}
exports.stackedBar = function (layerObject, scale, geom) {
    var area = ee.Image.pixelArea().divide(10000) //area in hectares 
    var image = ee.Image.cat(area, layerObject.layer.eeObject)
    // Define chart customization options.
    var options = {
        isStacked: true,
        legend: {
            position: 'in'
        },
        //titlePosition: 'in', 
        axisTitlesPosition: 'in',
        //hAxis: {textPosition: 'in'}, 
        vAxis: {
            textPosition: 'in'
        }
    };

    var histChart = (ui.Chart.image.byClass({
            image: image, //
            reducer: ee.Reducer.sum(),
            classBand: 1,
            region: geom,
            scale: scale,
            classLabels: layerObject.labels,
            //titleTextStyle: style.fonts.LegendTitle
            //     xLabels: layerObject.labels
        })
        .setOptions(options)
    )
    
   // var stacked = histChart.setOptions({isStacked:true})
    return [histChart]

}
exports.histByClass = histByClass[0]; 
exports.stackedBar = histByClass[1];
print(histByClass[0])
//exports.stackedBar = histByClass.setOptions({isStacked: true}); 
exports.histogramFeature = function (region, propName, buckwidth, title) {
    var chart = ui.Chart.feature
        .histogram({
            features: region,
            property: propName,
            maxBuckets: 16,
            minBucketWidth: buckwidth
        })
        .setOptions({
            title: title,
            // titleTextStyle: style.fonts.LegendTitle
        });
    return chart;
};
var histogramImage = function (layerObject, WS, scale) {
    var chart = ui.Chart.image.histogram({
        image: layerObject.layer.eeObject,
        region: WS,
        scale: scale,
        maxBuckets: 16,
    });

    chart.style().set({ //width:'300px',
        height: '185px'
    })
    chart.setSeriesNames(
        (layerObject.layer.name + ' (' + layerObject.units + ')'), 0)
    chart.setOptions({
        //  fontSize:12,

        //bar: {groupWidth: '90%'},
        legend: {
            position: 'none'
        },
        //explorer:{},
        vAxis: {
            gridlines: {
                color: 'whitesmoke',
                count: 4,
                title: 'title'

            },
            minorGridlines: {
                color: 'white'
            },
            format: 'short',
            textPosition: 'in',
            // baselineColor: 'black',
            //  viewWindowMode: 'maximized'
        },
        chartArea: { //height:'80%', 
            //width:'100%',
            top: 36,
            bottom: 36,
            left: 8,
            right: 8
        },
        hAxis: {
            gridlines: {
                color: 'white',
                //  count: 4,
            },
            title: (layerObject.layer.name + ' (' + layerObject.units + ' )')
            //textPosition:'in',
            // format:'short',
            // viewWindowMode: 'maximized',
            //  baselineColor:'black'
        },
        //  titlePosition: 'in',
        //theme:'maximized',
        title: ('Watershed histogram') // Elevation in Colorado (meters)'


    });
    return chart;
};
exports.histogramImage = histogramImage;
var makePieChart = function (
    geometry, properties, scale, holeSize) {
    var AOI = geometry;
    var image = properties.layer.eeObject
    var withArea = ee.Image.pixelArea().addBands(image);
    var clipImage = withArea.clip(AOI)
    //////////////////////////////////////////////////////////////
    // Calculations
    //////////////////////////////////////////////////////////////
    var lookup_names = ee.Dictionary.fromLists(
        ee.List(properties.values).map(ee.String),
        properties.labels
    );
    // print('lookup names', lookup_names)
    var lookup_palette = ee.Dictionary.fromLists(
        ee.List(properties.values).map(ee.String),
        properties.layer.visParams.palette
    );
    // print(ee.List(lookup_palette))
    //////////////////////////////////////////////////////////////   // Helper functions    //////////////////////////////////////////////////////////////
    function createFeature(transition_class_stats) {
        transition_class_stats = ee.Dictionary(transition_class_stats);
        var class_number = transition_class_stats.get('class value');
        var result = {
            transition_class_number: class_number,
            transition_class_name: lookup_names.get(class_number),
            transition_class_palette: lookup_palette.get(class_number),
            area_m2: transition_class_stats.get('sum')
        };
        return ee.Feature(null,
            result); // Creates a feature without a geometry.
    }
    // Create a JSON dictionary that defines piechart colors based on thetransition class palette.
    // https://developers.google.com/chart/interactive/docs/gallery/piechart
    function createPieChartSliceDictionary(fc) {
        return ee.List(fc.aggregate_array("transition_class_palette"))
            // .map(function (p) {
                //return {
                 //   'color': p
                //};
            }
    
    //var classValue = image.get('system:title')
    //print(classValue)
    var reduction_results = clipImage.reduceRegion({
        reducer: ee.Reducer.sum().group({
            groupField: 1,
            groupName: 'class value',
        }),
        geometry: AOI,
        scale: scale,
        bestEffort: true,
    });
    //   print('reduction_results', reduction_results);
    var roi_stats = ee.List(reduction_results.get('groups'));
    //    print('roi stats', roi_stats)
    var transition_fc = ee.FeatureCollection(roi_stats.map(createFeature));
    //  print('transition_fc', transition_fc);
    // Add a summary chart.
    var transition_summary_chart =
        ui.Chart.feature.byFeature({
            features: transition_fc,
            xProperty: 'transition_class_name',
            yProperties: ['area_m2'] // 'transition_class_number']
        })
        .setChartType('PieChart') //le')

    createPieChartSliceDictionary(transition_fc)
    //.evaluate(function(result) {
    // When the server returns the value, show it.

    return transition_summary_chart.setOptions({
        pieHole: holeSize,
        is3D: true,
        legend: {
            position: 'none'
        },
        chartArea: {
           height: '100%',
          width: '100%'
        },
        pieSliceText: 'label',
        title: properties.layer.name,
        //  pieStartAngle: 100,
        //slices: createPieChartSliceDictionary(transition_fc).evaluate,
        sliceVisibilityThreshold: 0.05
    });
}; 

//
exports.pieChart = makePieChart
//exports.fc = makePieChart[1]

var bigNum = function (layerObj, region, scale, reducerType) {
    var panel = ui.Panel({
        style: {
            width: '33%',
            padding: '10px',
            margin: 0
        }
    }) //.style().set({width: '33%'})
    var units = layerObj.units
    var loading = 'loading...'
    var infoLabel = ui.Label({
        value: 'â“˜',
        targetUrl: 'https://github.com/stormwaterheatmap'
    })
    infoLabel.style().set({
        margin: '2px',
        padding: '2px',
        color: 'white',
        backgroundColor: style.colors.transparent,
    })
    var titlePanel = ui.Panel({
        layout: ui.Panel.Layout.flow('horizontal')
    })
    titlePanel.style().set({
        margin: 0,
        padding: 0,
        backgroundColor: color,
        stretch: 'horizontal'
    })
    var card = ui.Panel({
        style: {
            backgroundColor: style.colors.transparent,
            margin: 0,
            //border: "0.5px solid black",
            width: '100%',
            //height: '100px', 
            padding: 0,
        }
    }) //.setLayout(ui.Panel.Layout.absolute())//('horizontal')); 
    var bigNum = ui.Label({
        value: loading,
        style: {
            margin: 0,
            padding: '0px 12px 0px 0px',
            fontSize: '48px',
            fontWeight: '700',
            backgroundColor: style.colors.transparent,
            color: 'white',
            //position: 'middle-right', 
            textAlign: 'right',
            stretch: 'horizontal'
        }
    })

    var titleLabel = ui.Label({
        value: layerObj.layer.name,
        style: style.fonts.Body1
    });
    titleLabel.style().set({
        margin: 0,
        padding: '4px 64px 0px 12px',
        position: 'top-left',
        stretch: 'horizontal',
        color: 'white',
        backgroundColor: color
    });

    units = ui.Label({
        value: layerObj.units,
        style: {
            margin: '-8px 0px 0px 0px ',
            padding: '0px 14px 4px 0px',
            fontSize: '12px',
            fontWeight: '400',
            backgroundColor: style.colors.transparent,
            color: 'white',
            textAlign: 'right',
            stretch: 'horizontal'
        }
    })
    //make a right-hand-side panel to hold big number and units. 
    var rightPan = ui.Panel({ //layout: ui.Panel.Layout.absolute(), 
        layout: ui.Panel.Layout.flow('vertical'),
        style: { //backgroundColor: style.colors.transparent,
            //textAlign: 'center', 
            //position: 'middle-right',
            margin: 0,
            padding: 0,
            // border: '1px dotted white', 
            backgroundColor: color
        }
    });


    //one more panel to hold the information 
    var outerCard = ui.Panel({
        layout: ui.Panel.Layout.flow('vertical', true),
        style: {
            //border: '1px solid grey', 
            // margin: '12px',
            padding: '12px',
            backgroundColor: style.colors.transparent,
            position: 'top-left'
        }
    }) //.add(ui.Label('outer Card') )
    var info = ui.Label({
        value: 'more information here',
        style: style.fonts.Caption1
    })

    info.style().set({
        color: style.colors.grey,
        //position: 'bottom-right', 
        textAlign: 'right',
        // fontWeight: '600',
        stretch: 'horizontal',
        //backgroundColor: style.colors.transparent, 
        margin: 0,
        padding: '4px',
    });

    //make panels 

    titlePanel.add(titleLabel) //.add(infoLabel)
    rightPan.add(bigNum).add(units)
    card.add(titlePanel).add(rightPan)
    outerCard.add(card).add(info)

    /*rightPan.add(bigNum).add(units)
    card.add(title).add(infoLabel).add(rightPan)
    outerCard.add(card).add(info)
    }*/
    //makePanels()
    if (reducerType === 'mean') {
        var reduced = ee.Number((layerObj.layer.eeObject).reduceRegion({
            reducer: ee.Reducer.mean(),
            geometry: region,
            scale: scale,
            bestEffort: true

        }).get(layerObj.layer.eeObject.bandNames().get(0)))

        reduced.evaluate(function (result) {
            // When the server returns the value, show it.
            bigNum.setValue(result.toFixed(0))
        })
    } else if (reducerType === 'sum') {
        //reduced = reduced.toFixed()
        var reduced = ee.Number((layerObj.layer.eeObject).reduceRegion({
            reducer: ee.Reducer.sum(),
            geometry: region,
            scale: scale,
            bestEffort: true

        }).get(layerObj.layer.eeObject.bandNames().get(0)))

        reduced.evaluate(function (result) {
            // When the server returns the value, show it.
            bigNum.setValue(result.toFixed(0))
        })

    } else if (reducerType === 'percent') {
        //reduced = reduced.toFixed()
        var reduced = ee.Number((layerObj.layer.eeObject).reduceRegion({
            reducer: ee.Reducer.mean(),
            geometry: region,
            scale: scale,
            bestEffort: true

        }).get(layerObj.layer.eeObject.bandNames().get(0)))


        reduced.evaluate(function (result) {
            // When the server returns the value, show it.
            bigNum.setValue(
                result.toFixed(0).toString().concat(
                    "%"))
        }) //.add(units)
    }

    return outerCard

}

exports.bigNum = bigNum;

var littleNum = function (layerObj, region, scale, reducerType) {

    var units = layerObj.units
    var loading = 'loading...'
    /*var titlePanel = ui.Panel({
        layout: ui.Panel.Layout.flow('horizontal')
    })
    titlePanel.style().set({
        margin: 0,
        padding: 0,
        backgroundColor: color,
       // border: '1px solid grey'
       // stretch: 'horizontal'
    })*/

    var bigNum = ui.Label({
        value: loading,
        style: style.fonts.Body3

    });

    bigNum.style().set({
        margin: 0, //'5px',
        padding: '2px 0px 2px 4px',
        fontSize: '24px',
        //fontWeight: '400',
        backgroundColor: style.colors.transparent,
        //color: colors.pDark,
        //position: 'middle-right', 
        textAlign: 'left',
        // stretch: 'horizontal'
    })

    var titleLabel = ui.Label({
        value: layerObj.layer.name,
        style: style.fonts.H4
    });
    titleLabel.style().set({
        margin: 0,
        // fontSize: '13px',
        //fontWeight: 100, 
        padding: '0px 2px 0px 4px',
        //  position: 'top-left',
        // stretch: 'horizontal',
        textAlign: 'left',
        //color: colors.lightBlack,
        //backgroundColor: color
    });

    units = ui.Label({
        value: layerObj.units,
        style: style.fonts.Caption3
    });
    units.style().set({
        textAlign: 'left',
        margin: 0,
        padding: '0px 2px 8px 5px',
        //stretch: 'horizontal'
    });


    var numPan = ui.Panel({
        layout: ui.Panel.Layout.flow('vertical', true),
        style: {
            width: '200px'
        }
    }) //height: '200px'}}); 

    numPan.add(titleLabel) //.add(infoLabel)
    numPan.add(bigNum)
    numPan.add(units)

    var infoLabel = ui.Label({
        style: style.fonts.Caption3
    })
    infoLabel.style().set({
        margin: 0, //
        fontSize: '10px',
        color: style.colors.sDark,
        padding: '8px 2px 0px 4px'
    })
    var labelText = (
        'Scale of Analysis: ' + scale + ' sq.m/pixel' + /n/ + scale)
    var labelText2 = ui.Label({
        style: style.fonts.Caption3
    });
    labelText2.style().set({
        margin: 0, //fontSize: '10px',
        //color:style.colors.sDark,
        fontSize: '10px',
        padding: '2px 2px 0px 4px'
    });
    labelText2.setValue('Source: ' + layerObj.sourceName)
    labelText2.setUrl(layerObj.sourceUrl);

    infoLabel.setValue(labelText)
    numPan //.add(infoLabel)
        .add(labelText2) //.add(labelText2)

    if (reducerType === 'mean') {
        var reduced = ee.Number((layerObj.layer.eeObject).reduceRegion({
            reducer: ee.Reducer.mean(),
            geometry: region,
            scale: scale,
            bestEffort: true

        }).get(layerObj.layer.eeObject.bandNames().get(0)))

        reduced.evaluate(function (result) {
            // When the server returns the value, show it.
            bigNum.setValue(result.toFixed(0))
        })
        //  


    } else if (reducerType === 'sum') {
        //reduced = reduced.toFixed()
        var reduced = ee.Number((layerObj.layer.eeObject).reduceRegion({
            reducer: ee.Reducer.sum(),
            geometry: region,
            scale: scale,
            bestEffort: true

        }).get(layerObj.layer.eeObject.bandNames().get(0)))

        reduced.evaluate(function (result) {
            // When the server returns the value, show it.
            bigNum.setValue(result.toFixed(0))
        })

    } else if (reducerType === 'percent') {
        //reduced = reduced.toFixed()
        var reduced = ee.Number((layerObj.layer.eeObject).reduceRegion({
            reducer: ee.Reducer.mean(),
            geometry: region,
            scale: scale,
            bestEffort: true

        }).get(layerObj.layer.eeObject.bandNames().get(0)))


        reduced.evaluate(function (result) {
            // When the server returns the value, show it.
            bigNum.setValue(
                result.toFixed(0).toString().concat(
                    "%"))
        }) //.add(units)
    }

    return numPan

}
exports.littleNum = littleNum;

var imgToFc = function (layerObject, geomtery, scale) {
    var AOI = geometry;
    var image = layerObject.layer.eeObject
    var withArea = ee.Image.pixelArea().addBands(image);
    var clipImage = withArea.clip(AOI)
    var reduction_results = (clipImage).reduceRegion({
        reducer: ee.Reducer.sum().group({
            groupField: 1,
            groupName: 'class value',
        }),
        geometry: AOI,
        scale: scale,
        bestEffort: true,
    });
    var lookup_names = ee.Dictionary.fromLists(
        ee.List(layerObject.values).map(ee.String),
        layerObject.labels
    );
    // print('lookup names', lookup_names)
    //////////////////////////////////////////////////////////////   // Helper functions    //////////////////////////////////////////////////////////////
    function createFeature(transition_class_stats) {
        transition_class_stats = ee.Dictionary(transition_class_stats);
        var class_number = transition_class_stats.get('class value');
        var result = {
            transition_class_number: class_number,
            transition_class_name: lookup_names.get(class_number),
            transition_class_palette: lookup_palette.get(class_number),
            area_m2: transition_class_stats.get('sum')
        };
        return ee.Feature(null,
            result); // Creates a feature without a geometry.
    }

    function createPieChartSliceDictionary(fc) {


        var roi_stats = ee.List(reduction_results.get('groups'));
        //    print('roi stats', roi_stats)
        var transition_fc = ee.FeatureCollection(roi_stats.map(createFeature));
        // print('transition_fc', transition_fc);
        // Add a summary chart.

        return transition_fc;
    }
}

exports.imgToFc = imgToFc
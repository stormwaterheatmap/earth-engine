/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var image = ee.Image("users/stormwaterheatmap/meanAnnual_precip"),
    imageCollection = ee.ImageCollection("TRMM/3B43V7"),
    geometry = 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-122.27534541929617, 48.124118775306165],
          [-122.27534541929617, 47.511822033134536],
          [-121.91279659117117, 47.511822033134536],
          [-121.91279659117117, 48.124118775306165]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/*exports.histogramFeature = function (region, propName, buckwidth, title) {
    var chart = ui.Chart.feature
        .histogram({
            features: region,
            property: propName,
            maxBuckets: 16,
            minBucketWidth: buckwidth
        })
        .setOptions({
            title: title
        });
    return chart;
};

exports.histogramImage = function (image, WS, scale, title) {
    var chart = ui.Chart.image
        .histogram({
            image: image,
            region: WS,
            scale: scale,
            maxBuckets: 16
        })
        .setOptions({
            title: title
        });
    return chart;
};*/

var makePieChart = function (geometry, properties, holeSize) {
    var AOI = geometry;
    var image = properties.layer
    var withArea = ee.Image.pixelArea().addBands(image);
    var clipImage = withArea.clip(AOI)

    //Dictionary (will be imported)
    /*
    var properties =  {
            layer: image,
            layerName: ['Hydrologic properties Group'], 
              palette: ['#69995D', '#564138', '#F06543', '#7FFF7F', '#05668D'],
              minMax: [0,4],
              discrete: true, 
              values: [0, 1, 2, 3, 4], 
              labels: ['A/B', 'C', 'D', 'water', 'Water'],
            legend: [
                { '2016': 'red' }, { '...': 'orange' }, { '2000': 'yellow' },
                { 'No loss': 'black' }, { 'Water or no data': 'grey' }
            ]
        }
    print(properties)
    */



    //////////////////////////////////////////////////////////////
    // Calculations
    //////////////////////////////////////////////////////////////




    var lookup_names = ee.Dictionary.fromLists(
        ee.List(properties.values).map(ee.String),
        properties.labels
    );

    print('lookup names', lookup_names)

    var lookup_palette = ee.Dictionary.fromLists(
        ee.List(properties.values).map(ee.String),
        properties.palette
    );


    print(ee.List(lookup_palette))

    //////////////////////////////////////////////////////////////
    // Helper functions
    //////////////////////////////////////////////////////////////

    function createFeature(transition_class_stats) {
        transition_class_stats = ee.Dictionary(transition_class_stats);
        var class_number = transition_class_stats.get('class value');
        var result = {
            transition_class_number: class_number,
            transition_class_name: lookup_names.get(class_number),
            transition_class_palette: lookup_palette.get(class_number),
            area_m2: transition_class_stats.get('sum')
        };
        return ee.Feature(null,
        result); // Creates a feature without a geometry.
    }

    // Create a JSON dictionary that defines piechart colors based on the
    // transition class palette.
    // https://developers.google.com/chart/interactive/docs/gallery/piechart
    function createPieChartSliceDictionary(fc) {
        return ee.List(fc.aggregate_array("transition_class_palette"))
            .map(function (p) {
                return {
                    'color': p
                };
            }).getInfo();
    }

    //var classValue = image.get('system:title')
    //print(classValue)

    var reduction_results = clipImage.reduceRegion({
        reducer: ee.Reducer.sum().group({
            groupField: 1,
            groupName: 'class value',
        }),
        geometry: AOI,
        scale: 1,
        bestEffort: true,
    });
    print('reduction_results', reduction_results);
    var roi_stats = ee.List(reduction_results.get('groups'));
    print('roi stats', roi_stats)

    var transition_fc = ee.FeatureCollection(roi_stats.map(createFeature));
    print('transition_fc', transition_fc);

    // Add a summary chart.
    var transition_summary_chart = ui.Chart.feature.byFeature({
            features: transition_fc,
            xProperty: 'transition_class_name',
            yProperties: ['area_m2', 'transition_class_number']
        })
        .setChartType('PieChart')
        .setOptions({
            title: 'Summary of '.concat(properties.layerName),
            pieHole: holeSize,
            slices: createPieChartSliceDictionary(transition_fc),
            sliceVisibilityThreshold: 0.02
        });

    return (transition_summary_chart);

}

//exports.pieChart = makePieChart; 



//chart test

var legends = require('users/stormwaterheatmap/apps:Modules/legends');
var palettes = require('users/gena/packages:palettes');
var charts = require('users/stormwaterheatmap/apps:Modules/chart');
var datasets = require('users/stormwaterheatmap/apps:Modules/datasets');
var layerProperties = require('users/stormwaterheatmap/apps:Modules/layerProperties');

var soils = layerProperties.Soils
print(soils)
Map.addLayer(soils.layer)

var chart = makePieChart(geometry, soils , 0.4)
print(chart)



var style = require('users/stormwaterheatmap/apps:Modules/Style')
var fonts = style.fonts

//makes stretched legend
function ColorBar(layerObj) {
  return ui.Thumbnail({
    image: ee.Image.pixelLonLat().select(0),
    params: {
      bbox: [0, 0, 1, 0.1],
      dimensions: '200x20',
      format: 'png',
      min: 0,
      max: 1,
      palette: layerObj.layer.visParams.palette,
    },
    style: {stretch: 'horizontal', margin: '0px 8px'},
  });
}

function undoColorStretch(val) {
  return Math.exp(val)
}

var barLegend_log_xform = function(layerObj){
   var title_label = 
    ui.Label({value: layerObj.layer.name,
    style: {
            fontWeight: 'bold',
            fontSize: '18px',
            // margin: '0 0 4px 0',
            // padding: '0'
        }})
  
  var low = ee.Number(layerObj.layer.visParams.min).getInfo()
  var high = ee.Number(layerObj.layer.visParams.max).getInfo()
  var mid = (high - low)/2 
    var labelPanel = ui.Panel(
      [
        ui.Label(Math.round(undoColorStretch(low)), {margin: '4px 8px'}),
        ui.Label(
            Math.round(undoColorStretch(mid)),
            {margin: '4px 8px', textAlign: 'center', stretch: 'horizontal'}),
        ui.Label(Math.round(undoColorStretch(high)), {margin: '4px 8px'})
      ],
      ui.Panel.Layout.flow('horizontal'));
  var units_label = ui.Label({value:layerObj.units,style:fonts.Caption2})
  var layer_description = ui.Label({value: layerObj.description, style:fonts.Caption2})
 
  return ui.Panel([title_label,layer_description,ColorBar(layerObj), labelPanel,units_label])
}
  

var barLegend = function (layerObj) {
  var title_label = 
    ui.Label({value: layerObj.layer.name,
    style: {
            fontWeight: 'bold',
            fontSize: '18px',
            // margin: '0 0 4px 0',
            // padding: '0'
        }})
  
  var low = (layerObj.layer.visParams.min)
  var high = (layerObj.layer.visParams.max)
  var mid = (ee.Number(high).subtract(low)).divide(2).getInfo()
  var labelPanel = ui.Panel(
      [
        ui.Label(low, {margin: '4px 8px',textAlign: 'left',stretch: 'horizontal'}),
        ui.Label(mid, {margin: '4px 8px', textAlign: 'center',stretch: 'horizontal'}),
        ui.Label(high, {margin: '4px 8px',textAlign: 'right',stretch: 'horizontal'})
      ],
      ui.Panel.Layout.flow('horizontal')
      //{width: '230px', position: 'top-center'}
      );
  var units_label = ui.Label({value:layerObj.units,style:fonts.Caption2})
  var layer_description = ui.Label({value: layerObj.description, style:fonts.Caption2})
 
  return ui.Panel([title_label,layer_description,ColorBar(layerObj), labelPanel,units_label])
}

var discreteLegend = function (layerObject) {
    //var BAND_NAME = bandName //Land_Cover_Type_1';  
  
    //var image = ee.Image('MODIS/051/MCD12Q1/2001_01_01')
    //          .select(BAND_NAME);
  
    // Create the panel for the legend items.
    var legend = ui.Panel({
        style: {
            position: 'top-left',
            padding: '8px 15px'
        }
    });
    // Create and add the legend title.
    var legendTitle = ui.Label({
        value: layerObject.layer.name.toString(), //'MODIS Land Cover',
        style: {
            fontWeight: 'bold',
            fontSize: '18px',
            // margin: '0 0 4px 0',
            // padding: '0'
        }
    });
    
    var layer_description = ui.Label({value: layerObject.description.toString(), style:fonts.Caption2})
    legend.add(legendTitle).add(layer_description);
    
    var loading = ui.Label('Loading legend...', {
        margin: '2px 0 4px 0'
    });
    
    legend.add(loading);
    // Creates and styles 1 row of the legend.
    var makeRow = function (name,color) {
        // Create the label that is actually the colored box.
        var colorBox = ui.Label({
            style: {
                backgroundColor: color,
                // Use padding to give the box height and width.
                padding: '8px',
                margin: '0 0 4px 0'
            }
        });

        // Create the label filled with the description text.
        var description = ui.Label({
            value: name,
            style: {
                margin: '0 0 4px 6px'
            }
        });

        return ui.Panel({
            widgets: [colorBox, description],
            layout: ui.Panel.Layout.Flow('horizontal')
        });
    };
    // Get the list of palette colors and class names from the image.

        var palette = layerObject.layer.visParams.palette;
      
        var names = layerObject.labels;
   
        loading.style().set('shown', false);

        for (var i = 0; i < names.length; i++) {
         
         
            legend.add(makeRow(names[i],palette[i]));
        }
    

    return legend

}
var data  = require('users/stormwaterheatmap/apps:data/data_dict_v3')
exports.barLegend = barLegend
exports.discreteLegend = discreteLegend
exports.barLegend_log_xform = barLegend_log_xform

 


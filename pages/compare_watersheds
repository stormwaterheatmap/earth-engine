/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var KCimp = ee.Image("users/cnilsen/comb_imp"),
    NHDPlus = ee.FeatureCollection("users/cnilsen/PugetLowlandsNHDPlusWatershedsNamed"),
    TSS = ee.Image("users/cnilsen/TSSLoad"),
    geometry = /* color: #d63000 */ee.Geometry.MultiPoint(
        [[-122.05088915251235, 47.59999236617272],
         [-122.03337654692905, 47.616203741519826],
         [-122.01930031401889, 47.61134345114383],
         [-122.02170357329624, 47.599074995250184]]),
    PS_AU = ee.FeatureCollection("users/cnilsen/PS_AU"),
    HUC12 = ee.FeatureCollection("USGS/WBD/2017/HUC12");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/*Load modules 
---------------------------------------------------------------------------------------------------- 
*/

var data  = require('users/stormwaterheatmap/apps:data/data_dict.js')
var Style = require('users/stormwaterheatmap/apps:Modules/Style')
var charts = require('users/stormwaterheatmap/apps:Modules/chart.js')
var legends = require('users/stormwaterheatmap/apps:Modules/legends')
var helpers = require('users/stormwaterheatmap/apps:Modules/helpers')
var fonts = Style.fonts
var input_layers = data.rasters["Input Data Layers"]
var hydrology_layers = data.rasters["Hydrology Data Layers"]
var objectMerge = function(){
    var out = {};
    if(!arguments.length)
        return out;
    for(var i=0; i<arguments.length; i++) {
        for(var key in arguments[i]){
            out[key] = arguments[i][key];
        }
    }
    return out;
}
var layerProperties = objectMerge(input_layers,hydrology_layers) 
print("layer Properties", layerProperties.Precipitation)

var vectors_dict = data.vectors_dict


var rasters = data.rasters
var layer_types = Object.keys(rasters)



/*Style defaults  
---------------------------------------------------------------------------------------------------- 
*/

var colors = Style.colors
print(colors)
var fonts = Style.fonts //var panelStyle = Style.panelStyle//print(panelStyle)
var featureStyle = {
    color: 'white',
    fillColor: '00000000'
}


// Layer Diaglog 

var panel = ui.Panel();

/* Label */ 

var panel_label = helpers.info_panel("Select Layer Type:","null")
        
var layer_label = ui.Label({value:"Display Layer:"})
var panel_layout = ui.Panel.Layout.absolute("bottom-left")

/* Style */ 

panel_label.style().set('fontWeight','500')

var panel_style = {position: 'bottom-left'}//,width:'300px', height:"80%"}



/* Panel */ 
var panel = ui.Panel({style:panel_style})//, layout:panel_layout})//, })
//Map.add(panel)

var legendPanel = ui.Panel({style:{position:'bottom-left',shown:false, minWidth: "300px"}
})
Map.add(legendPanel)
var select_layer_type = ui.Select({
  items: layer_types,
  placeholder: "Select Layer Type", 
  value: layer_types[0], 
  onChange: function() {
    var layer_dict = rasters[select_layer_type.getValue()]; 
    var layers_list = Object.keys(layer_dict); 
      secondname_select = ui.Select({
        items: layers_list,//select_layer_type.getValue()], 
        onChange: function() {
          var layer_obj = layer_dict[secondname_select.getValue()]
          legendPanel.style().set({shown:true})
          helpers.clear_map_add_layer(layer_obj,legendPanel)
        }
      });
    
  
  
    panel.widgets().set(3, secondname_select);
  }
  
  });




var secondname_select = ui.Select();
panel.widgets().set(0, panel_label); 
panel.widgets().set(1, select_layer_type);
panel.widgets().set(2,layer_label); 
panel.widgets().set(3, secondname_select);

var map_init = function(map){
 var m = map || Map
 //m.clear()
 //m.add(panel)
 //m.add(legendPanel)
 select_layer_type.setValue("Input Data Layers")
 secondname_select.setValue("Slope")
 //legendPanel.style().set({shown:true})
          //helpers.clear_map_add_layer(layer_obj,legendPanel)
  
}
helpers.make_tnc_map()
map_init()
var mainPanel = helpers.makeMainPanel("View Data Layers");
mainPanel.add(panel)
Map.add(mainPanel)

var vectors_dict = data.vector_dict

var watershed_data_set = HUC12//initial value only
//----Get vector data 
print(data.vector_dict)
//Get watershed values from the data list 
var watershedSelect = ui.Select({items: Object.keys(data.vector_dict).sort(), 
    placeholder: 'Select a value',
    //value: 'HUC 12'
    onChange: function (selected) {
        Map.layers().reset()
        print(selected)
        var WS = vectors_dict[selected]
        Map.addLayer(WS.style(featureStyle)) 
        watershed_data_set = WS//oct
        //analyzePanel.add((buttonPanel))

    }
});


var watershedSelectLabel = ui.Label({
    value: 'Select a watershed dataset to aggregate data:',
});
var analyzePanel = ui.Panel({
    style: {
        shown: true
    }
})

analyzePanel.add(watershedSelectLabel)
analyzePanel.add(watershedSelect)

Map.add(analyzePanel)

//---
/*Global Variables------------------------------------------------------------------------------------- 
 */



// The GHSL global TSS density dataset for 2015.
var TSS = TSS.select('remapped_1');//mg/year 
var TSS = TSS.divide(1e6); //covert to kg/year

// Country boundary data with associated precomputed TSS totals.
// var WSVal = watershedSelect.getValue();
// var watershed = ee.FeatureCollection(vectors_dict.WSVal);
// print(watershed.first())



/*
 * Visualization and styling
 */
//Palettes
var virdis = [ '420052','472075','3F4286','33608C','27798E',
                '1E918D','1FAA86','42C175','7BD259','BCE03B','FCE83F']; 
                
 var magma = [ '000000', '090285','41009C','6B00A7','6B00A7','B22490',
                'CD4479','E16465','F18551','FBA742','FBA742','F0F93F', 'defce1']; 

// Constants used to visualize the data on the map.
var TSS_style = {
  min: 0,
  max: 1,
  opacity: 0.80,
  palette: virdis
};

//#d1eeea,#a8dbd9,#85c4c9,#68abb8,#4f90a6,#3b738f,#2a5674



var TSS_VIS_MAX_VALUE = 16;
var TSS_VIS_NONLINEARITY = 2;
var watershed_STYLE = {color: 'ffffff', fillColor: '00000000'};
var HIGHLIGHT_STYLE = {color: '8856a7', fillColor: '8856a7C0'};

// Apply a non-linear stretch to the TSS data for visualization.
function colorStretch(image) {
  return image.divide(TSS_VIS_MAX_VALUE)
      .pow(1 / TSS_VIS_NONLINEARITY);
}

// Inverts the nonlinear stretch we apply to the TSS data for
// visualization, so that we can back out values to display in the legend.
// This uses ordinary JavaScript math functions, rather than Earth Engine
// functions, since we're going to call it from JS to compute label values.
function undoColorStretch(val) {
  return Math.pow(val, TSS_VIS_NONLINEARITY) * TSS_VIS_MAX_VALUE;
}

// Configure our map with a minimal set of controls.
//Map.setControlVisibility(false);
//Map.setControlVisibility({scaleControl: true, zoomControl: true});
Map.style().set({cursor: 'crosshair'});
var styles = {
  'Soft Blue': [
    {
      featureType: 'all',
      stylers: [
        { saturation: -80 }
      ]
    },{
      featureType: 'road.arterial',
      elementType: 'geometry',
      stylers: [
        { hue: '#00ffee' },
        { saturation: 50 }
      ]
    },{
      featureType: 'poi.business',
      elementType: 'labels',
      stylers: [
        { visibility: 'off' }
      ]
    }
  ]
};

Map.setOptions('satellite', styles);


Map.setCenter(-122.3, 47.6, 10);

// Add our two base layers to the map: global TSS density and watershed.
//Map.addLayer(colorStretch(TSS.unmask(0).updateMask(1)), TSS_style);
//Map.addLayer(colorStretch(TSS), TSS_style);

var boxcar = ee.Kernel.circle({radius: 2});

// Smooth the image by convolving with the boxcar kernel.
var TSSDisplay = TSS.convolve(boxcar);

Map.addLayer(colorStretch(TSSDisplay), TSS_style);
//Map.addLayer((TSS.unmask(0).updateMask(1)), TSS_style);

//Map.addLayer(watershed.style(watershed_STYLE)); //this should be removed and done in the function
print(watershed_data_set)
var wsSelect = watershed_data_set.filterBounds(ee.Geometry(geometry)); 
//return sum of selected Watersheds
var load = TSS.reduceRegions({
  collection: wsSelect,
  reducer: ee.Reducer.sum() 
  }); 
  
print(load);   


print(wsSelect); 


//Test out making a bar chart 
/*
  var chart = ui.Chart.feature.byFeature(watershed, 'SOURCEFC',['AreaSqKM']);
  chart.setChartType('BarChart');
  chart.setOptions({
    title: 'Population Comparison',
    vAxis: {title: null},
    hAxis: {title: 'Approximate 2015 Population', minValue: 0}
  });
  chart.style().set({stretch: 'both'});
*/
//print(chart); 




// Create the application title bar.
//Map.add(ui.Label(
//    'Puget Sound TSS Explorer', {fontWeight: 'bold', fontSize: '24px'}));


/*
 * The chart panel in the bottom-right
 */

// A list of points the user has clicked on, as [lon,lat] tuples.
var selectedPoints = [];

// Returns the list of watershed the user has selected.
function getSelectedwatershed() {
  return watershed_data_set.filterBounds(ee.Geometry.MultiPoint(selectedPoints));
}

// Makes a bar chart of the given FeatureCollection of watershed by GRIDCODE.
function makeResultsBarChart(watershed) {
  //var wsSelect = watershed.filterBounds(ee.Geometry(geometry)); 
  //return sum of selected Watersheds
  var load = TSS.reduceRegions({
    collection: watershed,
    reducer: ee.Reducer.sum() 
  }); 
  var chart = ui.Chart.feature.byFeature(load, 'WSName', ['sum']);
  chart.setChartType('BarChart');
  chart.setOptions({
    title: 'TSS Comparison',
    vAxis: {title: null},
    hAxis: {title: 'Annual Stormwater TSS Load (kg/year', minValue: 0}
  });
  chart.style().set({stretch: 'both'});
  return chart;
}

// Makes a table of the given FeatureCollection of watershed by GRIDCODE.
function makeResultsTable(watershed) {
  var table = ui.Chart.feature.byFeature(load, 'WSName', ['sum']);
  table.setChartType('Table');
  table.setOptions({allowHtml: true, pageSize: 5});
  table.style().set({stretch: 'both'});
  return table;
}

// Updates the map overlay using the currently-selected watershed.
function updateOverlay() {
  var overlay = getSelectedwatershed().style(HIGHLIGHT_STYLE);
  Map.layers().set(2, ui.Map.Layer(overlay));
}

// Updates the chart using the currently-selected charting function,
function updateChart() {
  var chartBuilder = chartTypeToggleButton.value;
  var chart = chartBuilder(getSelectedwatershed());
  resultsPanel.clear().add(chart).add(buttonPanel);
}

// Clears the set of selected points and resets the overlay and results
// panel to their default state.
function clearResults() {
  selectedPoints = [];
  Map.layers().remove(Map.layers().get(2));
  var instructionsLabel = ui.Label('Select regions to compare TSS.');
  resultsPanel.widgets().reset([instructionsLabel]);
}

// Register a click handler for the map that adds the clicked point to the
// list and updates the map overlay and chart accordingly.
function handleMapClick(location) {
  selectedPoints.push([location.lon, location.lat]);
  updateOverlay();
  updateChart();
}
Map.onClick(handleMapClick);

// A button widget that toggles (or cycles) between states.
// To construct a ToggleButton, supply an array of objects describing
// the desired states, each with 'label' and 'value' properties.
function ToggleButton(states, onClick) {
  var index = 0;
  var button = ui.Button(states[index].label);
  button.value = states[index].value;
  button.onClick(function() {
    index = ++index % states.length;
    button.setLabel(states[index].label);
    button.value = states[index].value;
    onClick();
  });
  return button;
}

// Our chart type toggle button: the button text is the opposite of the
// current state, since you click the button to switch states.
var chartTypeToggleButton = ToggleButton(
    [
      {
        label: 'Display results as table',
        value: makeResultsBarChart,
      },
      {
        label: 'Display results as chart',
        value: makeResultsTable,
      }
    ],
    updateChart);

// A panel containing the two buttons .
var buttonPanel = ui.Panel(
    [ui.Button('Clear results', clearResults), chartTypeToggleButton],
    ui.Panel.Layout.Flow('horizontal'), {margin: '0 0 0 auto', width: '500px'});

var resultsPanel = ui.Panel({style: {position: 'bottom-right'}});
Map.add(resultsPanel);
clearResults();

/*Dropdown to select watershed layer to use
*/ 

/*
var places = {
  NHDPlusWatersheds: [NHDPlus],
  HUC12: [HUC12],
  WSCharacterization: [PS_AU]
};

var select = ui.Select({
  items: Object.keys(places),
  onChange: function(key) {
    WSVal = (places[key[0]]),
    Map.addLayer(watershed); //here we need to call a function containing the reducer function
  }
});*/

// Set a place holder.
watershedSelect.setPlaceholder('Choose a watershed data set');

//add to ui
// Add the select to the toolPanel with some explanatory text.
//Map.add(ui.Label('View the Layers', {'font-size': '18'}));
//Map.add(select);






/*
 * The legend panel in the bottom-left
 */

// A color bar widget. Makes a horizontal color bar to display the given
// color palette.
function ColorBar(palette) {
  return ui.Thumbnail({
    image: ee.Image.pixelLonLat().select(0),
    params: {
      bbox: [0, 0, 1, 0.1],
      dimensions: '100x10',
      format: 'png',
      min: 0,
      max: 1,
      palette: palette,
    },
    style: {stretch: 'horizontal', margin: '0px 8px'},
  });
}

// // Returns our labeled legend, with a color bar and three labels representing
// // the minimum, middle, and maximum values.
// function makeLegend() {
//   var labelPanel = ui.Panel(
//       [
//         ui.Label(Math.round(undoColorStretch(0)), {margin: '4px 8px'}),
//         ui.Label(
//             Math.round(undoColorStretch(0.5)),
//             {margin: '4px 8px', textAlign: 'center', stretch: 'horizontal'}),
//         ui.Label(Math.round(undoColorStretch(1)), {margin: '4px 8px'})
//       ],
//       ui.Panel.Layout.flow('horizontal'));
//   return ui.Panel([ColorBar(TSS_style.palette), labelPanel]);
// }

// // Styling for the legend title.
// var LEGEND_TITLE_STYLE = {
//   fontSize: '20px',
//   fontWeight: 'bold',
//   stretch: 'horizontal',
//   textAlign: 'center',
//   margin: '4px',
// };

// // Styling for the legend footnotes.
// var LEGEND_FOOTNOTE_STYLE = {
//   fontSize: '10px',
//   stretch: 'horizontal',
//   textAlign: 'center',
//   margin: '4px',
// };

// // Assemble the legend panel.
// Map.add(ui.Panel(
//     [
//       ui.Label('Stormwater TSS Load', LEGEND_TITLE_STYLE), makeLegend(),
//       ui.Label(
//           'kg/year', LEGEND_FOOTNOTE_STYLE),
//       ui.Label(
//           'Source: ', LEGEND_FOOTNOTE_STYLE),
//       ui.Label('Data source', LEGEND_FOOTNOTE_STYLE)
//     ],
//     ui.Panel.Layout.flow('vertical'),
//     {width: '230px', position: 'bottom-left'}));

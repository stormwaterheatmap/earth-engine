/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var featureViewLayer = ui.Map.FeatureViewLayer("projects/ee-stormwaterheatmap/assets/wria_fv", null, "wria_fv");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//ui.root.clear();
ui.root.setLayout(ui.Panel.Layout
    .absolute());
// data 
var data = require(
    'users/stormwaterheatmap/apps:data/data_dictionary.js'
)
print(data)
var Style = require(
    'users/stormwaterheatmap/apps:Modules/Style'
)
var helpers = require(
    'users/stormwaterheatmap/apps:Modules/helpers'
)
var fonts = Style.fonts
print(fonts)
var rasters = data.rasters
print(rasters)
var layer_types = {
    "Input Data Layers": {},
    "Hydrology Data Layers": {}
};
layer_types["Input Data Layers"] = {
    "Soils": rasters.Soils,
    "Age of Imperviousness": rasters[
        "Age of Imperviousness"
    ],
    //"HSPF Land Cover Type": rasters["HSPF Land Cover Type"], 
    "Imperviousness": rasters[
        "Imperviousness"],
    "Land Cover": rasters[
        "Land Cover"],
    "Land Use": rasters["Land Use"],
    //"Population": rasters["Population"], 
    "Population Density": rasters[
        "Population Density"],
    //"Precipitation (in)": rasters["Precipitation (in)"], 
    "Precipitation (mm)": rasters[
        "Precipitation (mm)"],
    //  "Runoff (in)": rasters["Runoff (in)"], 
    // "Runoff (mm)": rasters["Runoff (mm)"], 
    "Slope": rasters["Slope"],
    "Slope Categories": rasters[
        "Slope Categories"],
    "Traffic": rasters["Traffic"]
}
layer_types["Hydrology Data Layers"] = {
    "Flow Duration Index": rasters[
        "Flow Duration Index"],
    "Hydrologic Response Units": rasters[
        "Hydrologic Response Units"
    ],
    // "Runoff (in)": rasters["Runoff (in)"], 
    "Runoff (mm)": rasters[
        "Runoff (mm)"]
}
var coc_data = data.cocs
print(coc_data)
//var test_list = (Object.keys(rasters["Input Data Layers"]))
layer_types["Pollutant Loading"] =
    coc_data
//"Total Suspended Solids Concentration": rasters["Total Suspended Solids Concentration"], 
//"Total Suspended Solids Load": rasters["Total Suspended Solids Load"], 
//}
/* ----------------------------
WIDGETS 
*/
/* Select */
var panel = ui.Panel();
/* Label */
var panel_label = helpers.info_panel(
    "Select Layer Type:", "null")
var layer_label = ui.Label({
    value: "Display Layer:"
})
var panel_layout = ui.Panel.Layout
    .absolute("bottom-left")
/* Style */
panel_label.style()
    .set('fontWeight',
        '500')
var panel_style = {
    position: 'bottom-left'
} //,width:'300px', height:"80%"}
/* Panel */
var panel = ui.Panel({
    style: panel_style
}) //, layout:panel_layout})//, })
//Map.add(panel)
var legendPanel = ui.Panel({
    style: {
        position: 'bottom-right',
        shown: false,
        minWidth: "200px",
        maxWidth: "300px"
    }
})
Map.add(legendPanel)
var select_layer_type = ui.Select({
    items: Object.keys(
        layer_types),
    //placeholder: "Select Layer Type", 
    value: Object.keys(
        layer_types)[2],
    onChange: function () {
        var layer_dict =
            layer_types[
                select_layer_type
                .getValue()
            ];
        //print(layer_dict)
        var layers_list =
            Object.keys(
                layer_dict);
        secondname_select =
            ui.Select({
                items: layers_list, //select_layer_type.getValue()], 
                onChange: function () {
                    var layer_obj =
                        layer_dict[
                            secondname_select
                            .getValue()
                        ]
                    legendPanel
                        .style()
                        .set({
                            shown: true
                        })
                    helpers
                        .clear_map_add_layer(
                            layer_obj,
                            legendPanel
                        )
                }
            });
        panel.widgets()
            .set(
                3,
                secondname_select
            );
    }
});
print(layer_types, 'layer_types')
var secondname_select = ui.Select({
    items: Object.keys(
        layer_types[
            "Pollutant Loading"
        ]),
    onChange: function (
        result) {
        var layer_type =
            select_layer_type
            .getValue()
        print(layer_type)
        var layer_obj =
            layer_types[
                layer_type][
                result
            ]
        legendPanel.style()
            .set({
                shown: true
            })
        helpers
            .clear_map_add_layer(
                layer_obj,
                legendPanel)
    }
});
panel.widgets()
    .set(0, panel_label);
panel.widgets()
    .set(1,
        select_layer_type);
panel.widgets()
    .set(2, layer_label);
panel.widgets()
    .set(3,
        secondname_select);
var map_init = function (map) {
    var m = map || Map
    //m.clear()
    //m.add(panel)
    //m.add(legendPanel)
    //select_layer_type.setValue("Pollutant Loading")
    // secondname_select.setValue("Total Suspended Solids Concentration")
    legendPanel.style()
        .set({
            shown: true
        })
    helpers.clear_map_add_layer(
        coc_data[
            "Total Suspended Solids Concentration"
        ], legendPanel)
}
helpers.make_tnc_map()
map_init()
var mainPanel = helpers.makeMainPanel(
    "View Data Layers");
var subheading = ui.Label(
    'Explore layers, such as land cover, runoff, ' +
    'and pollutant loading using the selectors below. For information on a particular layer, ' +
    "add it to the map, and click the 'more info' link in the lengend panel."
)
subheading.style()
    .set(fonts.Caption2)
mainPanel.add(subheading)
mainPanel.style()
    .set({
        maxWidth: '100px'
    })
mainPanel.add(panel)
Map.add(mainPanel)
var WRIA_bounds = data.vector_dict[
    'Ecology Water Resource Inventory Area (WRIA)'
].filterBounds(data.vectors
    .PugetSound)
var WRIA_names = WRIA_bounds
    .reduceColumns({
        reducer: ee.Reducer
            .toList(),
        selectors: ['WRIA_NM']
    })

function handleImageExport() {
    var img_lay = Map.layers()
        .get(0)
    var region = shed_fc
    var img_out = img_lay.get(
        "eeObject")
    var vis = img_lay.get("visParams")
    var band = vis.bands
    

    var layer_description = img_lay.get(
            "name")
        .split(" ")
        .join("")
    var folder_name = dropdowns.getValue()
        .split(" ")
        .join("")
    Export.image.toCloudStorage({
        image: img_out,
        description: layer_description, //removes spaces
        bucket: 'tnc-data-v1-bucket',
        scale: 10,
        region: region,
        fileNamePrefix: "image-exports/"+folder_name+"/" +
            layer_description, //band.getInfo(), 
        fileFormat: 'GeoTIFF',
        formatOptions: {
            cloudOptimized: true
        }
    })
}
//add an export to bucket layer 
var WRIA_bounds = data.vector_dict[
    'Ecology Water Resource Inventory Area (WRIA)'
].filterBounds(
    data.vectors.PugetSound)
var WRIA_names = WRIA_bounds
    .reduceColumns({
        reducer: ee.Reducer
            .toList(),
        selectors: ['WRIA_NM']
    })
var names_list = ee.List((ee.Dictionary(
            WRIA_names)
        .get('list')))
    .sort()
var bucket_input = ui.Textbox({
    value: 'tnc-data-v1-bucket/image-exports',
    style: {
        width: '90%'
    },
    disabled: true
})
var export_panel = ui.Panel({
    widgets: [
        ui.Label({
            value: 'Export this layer to Google Cloud Platform',
            style: fonts
                .LegendTitle
        }),
        ui.Label({
            value: 'Bucket Name:',
            style: fonts
                .Body1
        }),
        bucket_input
    ]
})
var dropdowns = ui.Select({
    placeholder: 'WRIA Name',
    value: 'Duwamish - Green',
    items: (names_list)
        .getInfo(),
    onChange: zoomAndClip
})
var bounds = ui.Map.FeatureViewLayer(
        'projects/ee-stormwaterheatmap/assets/wria_fv'
    )
    .setVisParams({
        opacity: 0
    })

function zoomAndClip(shed) {
    Map.remove(bounds)
    Map.layers()
        .set(1, bounds)
    bounds.setVisParams({
        color: 'white',
        rules: [{
                filter: ee
                    .Filter
                    .neq(
                        'WRIA_NM',
                        dropdowns
                        .getValue()
                    ),
                isVisible: true,
                polygonStrokeWidth: 0,
                polygonFillColor: 'white'
            },
            {
                filter: ee
                    .Filter
                    .eq('WRIA_NM',
                        dropdowns
                        .getValue()
                    ),
                isVisible: true,
                polygonStrokeWidth: 2,
                polygonFillColor: 'white',
                polygonFillOpacity: 0,
                polygonStrokeOpacity: 1
            }
        ]
    })
    shed_fc = WRIA_bounds.filter(ee
        .Filter.eq('WRIA_NM', shed))
    Map.centerObject(shed_fc, 10)
}

var shed_fc //global value for shed
export_panel.add(dropdowns)
export_panel.add(ui.Button({
    label: 'Export',
    onClick: handleImageExport
}))
export_panel.style()
    .set({
        position: 'top-right'
    })
Map.add(export_panel)

// data 
var data = require('users/stormwaterheatmap/apps:data/data_dictionary.js')
var Style = require('users/stormwaterheatmap/apps:Modules/Style')
var helpers = require('users/stormwaterheatmap/apps:Modules/helpers')
var fonts = Style.fonts 
print(data)
var legendPanel = ui.Panel() 
Map.add(legendPanel)
var rasters = data.rasters 
print(rasters)
//var layer_types = {"Input Data Layers": {}, "Hydrology Data Layers": {}}; 
var layers_list = {
  "Soils": rasters.Soils, 
  "Age of Imperviousness": rasters["Age of Imperviousness"], 
  //"HSPF Land Cover Type": rasters["HSPF Land Cover Type"], 
  "Imperviousness": rasters["Imperviousness"], 
  "Land Cover": rasters["Land Cover"], 
  "Land Use": rasters["Land Use"], 
  //"Population": rasters["Population"], 
  "Population Density": rasters["Population Density"], 
  //"Precipitation (in)": rasters["Precipitation (in)"], 
  "Precipitation": rasters["Precipitation"], 
 //  "Runoff (in)": rasters["Runoff (in)"], 
 // "Runoff (mm)": rasters["Runoff (mm)"], 
  "Slope": rasters["Slope"], 
  "Slope Categories": rasters["Slope Categories"], 
  "Traffic": rasters["Traffic"]}
  
print(layers_list,'layers_list')

var layers_list = data.cocs
var test_list = (Object.keys(layers_list))
print(test_list)
// layer_types["Pollutant Loading"]=Object.keys(coc_data)

var select_layer = ui.Select({
  items: Object.keys(layers_list), 
  onChange: update_img(data.cocs[select_layer.getValue()])
})

Map.add(select_layer)

function update_img(layerObject){ 
var legend = helpers.makeLegend(layerObject)  
Map.layers().set(0,layerObject.layer)
  legend.style().set({position: "bottom-right"}); 
  legendPanel.clear().add(legend)}
  
// var select_layer_type = ui.Select({
//   items: Object.keys(layer_types),
//   placeholder: "Select Layer Type", 
//   //value: Object.keys(layer_types)[0], 
//   onChange: function() {
//     var layer_dict = layer_types[select_layer_type.getValue()]; 
//     //print(layer_dict)
//     var layers_list = Object.keys(layer_dict); 
//       secondname_select = ui.Select({
//         items: layers_list,//select_layer_type.getValue()], 
//         onChange: function() {
//           var layer_obj = layer_dict[secondname_select.getValue()]
//           legendPanel.style().set({shown:true})
//           helpers.clear_map_add_layer(layer_obj,legendPanel)
//         }
//       });
    
  
  
//     layer_panel.widgets().set(3, secondname_select);
//   }
  
//   });
// //select_layer_type.setValue("Pollutant Loading")

// var layer_panel = ui.Panel() 
// Map.add(layer_panel)

// var secondname_select = ui.Select({items: 
//   Object.keys(layer_types["Pollutant Loading"]),
//   onChange: function(result) {
//           var layer_obj = data.rasters[result]
//           legendPanel.style().set({shown:true})
//           helpers.clear_map_add_layer(layer_obj,legendPanel)
//         }
// });
// //layer_panel.widgets().set(0, panel_label); 
// layer_panel.widgets().set(1, select_layer_type);
// //layer_panel.widgets().set(2,layer_label); 
// layer_panel.widgets().set(3, secondname_select);
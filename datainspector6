/*Load modules 
---------------------------------------------------------------------------------------------------- 
*/
var data = require('users/stormwaterheatmap/apps:Modules/datasets')
var Style = require('users/stormwaterheatmap/apps:Modules/Style')
var charts = require('users/stormwaterheatmap/apps:Modules/chart')
var legends = require('users/stormwaterheatmap/apps:Modules/legends')
var fonts = Style.fonts
var layerProperties = data.rasters
var vectors = data.vectors
var holeSize = 0.5 //85;

/*Style defaults  
---------------------------------------------------------------------------------------------------- 
*/
var colors = Style.colors
var fonts = Style.fonts //var panelStyle = Style.panelStyle//print(panelStyle)

print(layerProperties)
/*Global Variables------------------------------------------------------------------------------------- 
 */
var clicked_basin
var clicked_basin_geom
var clicked_basin_fc
var WS

function handle_map_click(location) {

    print('hi from handleMapClick')
    var clicked_point = ee.Geometry.Point(location.lon, location.lat);
    clicked_basin_fc = WS.filterBounds(clicked_point); //use for display
    clicked_basin = ee.Feature(clicked_basin_fc.first());
    clicked_basin_geom = (clicked_basin_fc.first()).geometry();

    /*    var getFeatureInfo = function(clicked_basin) {
        clicked_basin.evaluate(function () {
                var wsName = ui.Label({
                    value: ['WRIA Name:', clicked_basin.getString('WRIA_NM').getInfo()],
                    style: fonts.Caption3
                });
                var wsNum = ui.Label({
                    value: ['WRIA Number:', clicked_basin.getString('WRIA_NR').getInfo()]
                })
                var wsArea = clicked_basin.area()
                print('Watershed area', wsArea)
                var featureInfo = ui.Panel([wsName,wsNum]); 
                buttonPanel.add(featureInfo)
                })
                
           } 
       print(getFeatureInfo)*/
    // buttonPanel.add(getFeatureInfo(clicked_basin))   
    print('Clicked Basin', clicked_basin)
    accept.style().set({
        shown: true
    })
    mapPanel.layers().reset()
    mapPanel.style().set({
        cursor: 'hand'
    });
    mapPanel.addLayer(clicked_basin_fc.style(Style.watershedStyle))

    mapPanel.centerObject(clicked_basin)
    var featureinfo = ui.Chart.feature.byFeature(clicked_basin).setChartType('Table')
    var infoTab = ui.Panel({
        style: {
            position: 'bottom-center',
            stretch: 'both',
            width: '80%',
            shown: false
        }
    })
    var closeTab = ui.Button({
        label: 'Close Table',
        onClick: function () {
            infoTab.style().set({
                shown: false
            })
        }
    })
    // infoTab.add(ui.Panel(ui.Label('‚åß')))
    infoTab.add(ui.Label({
        value: 'Watershed Info Table',
        style: fonts.H3
    }))
    infoTab.add(featureinfo)
    infoTab.add(closeTab)
    print('ok....')
    //infoTab.setOptions({orientation: 'vertical'})
    //print(infoTab)
    buttonPanel.add(ui.Button({
        label: 'Show Watershed Information Table',
        onClick: function () {
            mapPanel.add(infoTab)
            infoTab.style().set({
                shown: true
            })
        }
    }))

    return clicked_basin
    return clicked_basin_geom
}

function handle_inspect_click() {
    print('inspector Activated')
    mapPanel.style().set({
        cursor: 'crosshair'
    })
    var WSname = watershedSelect.getValue();
    //print(selected_WS)
    WS = vectors[WSname];
    //print(WS)
    mapPanel.onClick(function (location) {
        //print(location)
        (handle_map_click(location))
        print(layerProperties)
        /*        sidePanel.add(
                    makeReports()
                )*/
    })

}

function hline() {
    var line = (ui.Label({
        value: 'null',
        style: {
            //width:'90%',
            height: '0px',
            //padding: '0px ',
            //margin: '0px 0px 0px 0px',
            border: '1px solid whitesmoke',
            stretch: 'horizontal',
        }
    }));
    return line
}
var layerList = Object.keys(layerProperties)
var size = Object.keys(layerProperties).length
layerProperties.uiLayer = {}



var makeLegend = function (layerObject) {
    //make a ui.Layer for display 

    // make a legend for that layer 
    var legend
    if (layerObject.discrete) {
        print('true! ')
        legend = (legends.discreteLegend(layerObject)) //gets the first band of the image
        // call the histogram function print('histogram')
    } else {
        legend = (barLegend(layerObject))
    } //add reports  


    //add legend 
    legendPanel.clear()
    legendPanel.add(legend)


}
//var f = map.removeObject(imgElem1.getEeObject(), Map) //this worked!
var removeObject = function (eeObject, map) {
    var m = map || Map
    var layers = m.layers()
    var layersJS = layers.getJsArray()
    var removedIndexes = []
    for (var i in layersJS) {
        var layer = layersJS[i]
        var object = layer.getEeObject()
        if (object === eeobject) {
            m.remove(layer)
            removedIndexes.push(Number(i))
        }
    }
    return removedIndexes
}
var addObject = function (layerObject) {
    // var pobj = ui.mapPanel.Layer({eeObject: layerProperties.Precipitation.layer.eeObject}).getEeObject()//redefine inputs as ui.mapPanel.layer
    // mapPanel.add(layerObject.uiLayer)
    mapPanel.layers().add(layerObject.layer)
    // mapPanel.layers().add(layerObject.layer)
}
//layerProperties.Precipitation.uiLayer
function ColorBar(palette) {
    return ui.Thumbnail({
        image: ee.Image.pixelLonLat().select(0),
        params: {
            bbox: [0, 0, 1, 0.1],
            dimensions: '200x20',
            format: 'png',
            min: 0,
            max: 1,
            palette: palette,
        },
        style: {
            stretch: 'horizontal',
            margin: '0px 12px'
        },
    });
}
var barLegend = function (obj) {
    //  var labelPanel = ui.Panel(

    var palette = obj.layer.visParams.palette
    var low = obj.layer.visParams.min
    var high = obj.layer.visParams.max
    var mid = (low + high) / 2
    var labelPanel = ui.Panel(
        [
            ui.Label(low, {
                margin: '4px 8px',
                textAlign: 'left',
                stretch: 'horizontal'
            }),
            ui.Label(mid, {
                margin: '4px 8px',
                textAlign: 'center',
                stretch: 'horizontal'
            }),
            ui.Label(high, {
                margin: '4px 8px',
                textAlign: 'right',
                stretch: 'horizontal'
            })
        ],
        ui.Panel.Layout.flow('horizontal'),

        //    labelPanel.add(ui.Label(obj.units))
        {
            width: '230px',
            position: 'top-center'
        }
    );

    var unitlabel = (ui.Label(obj.units))
    var barTitle = (ui.Label({
        value: obj.layer.name,
        style: fonts.LegendTitle
    }))

    var barPanel = ui.Panel({
        widgets: [barTitle, ColorBar(palette), labelPanel, unitlabel],
        style: {
            position: 'top-left',
            padding: '12px'
        }
    })

    return barPanel
}
var checkPanel = ui.Panel({
    style: {
        width: '400px',
        height: '60%'
    }
})
/* 
UI Functions 
---------------------------------------------------------------------------------------------------- 
*/


function makeSidePanel() {

    var col1 = ui.Panel({
        style: {
            // width:'38.2%', //the golden ratio!
            backgroundColor: 'whitesmoke',
            //  border: '1px solid silver',
            //margin:'0',
            padding: '12px',
            shown: false,
            stretch: 'horizontal'
        }
    })
    return col1;
}
var clipLayers = function () {
    for (var key in layerProperties) {
        layerProperties[key].layer.eeObject = layerProperties[key].layer.eeObject.clip(clicked_basin_geom) //Todo ! cannot clip this - have to clip images, then convert to ui.mapPanel.layers
        //layerVal = layerVal.clip(clicked_basin_geom); //.clip(geometry)) //eeObject = 

        // layerProperties[key].layer.eeObject = layerVal 
        print('key', key)
        // print('layerVal', layerVal[key])//replace the cliped layers in the list

        print('returnedlayerVal')
    }
}
//** results Cards 
var histogramCard = function (layerObject) {
    var chartCard = ui.Panel({
        style: Style.cardPanel

    }) //.add(ui.Label('ChartCard'))
    chartCard.add((charts.histogramImage(layerObject, clicked_basin_geom,
        mapPanel.getScale())))
    var chartbutton = ui.Button({
        label: 'Display results as chart',
        onClick: function () {
            //reset the panel 
            chartbutton.style().set({
                shown: false
            })
            tablebutton.style().set({
                shown: true
            })
            chartCard.clear()
            chartCard.add(charts.histogramImage(layerObject, clicked_basin_geom,
                mapPanel.getScale()))
        }
    })
    var tablebutton = ui.Button({
        style: {
            shown: false
        }, //hides the button initially 
        label: 'Display results as table',
        onClick: function () {
            //reset the panel 
            tablebutton.style().set({
                shown: false
            })
            chartbutton.style().set({
                shown: true
            })
            chartCard.clear()
            var chart = charts.histogramImage(layerObject.layer.eeObject, clicked_basin_geom,
                mapPanel.getScale()).setChartType('Table')
            chart.setOptions({
                allowHtml: true,
                pageSize: 5
            }).style().set({
                stretch: 'both'
            })
            chartCard.add(chart)
        }
    })
    //make a panel to hold it 
    var card = ui.Panel({
        // style: {border: '1px solid black'}
    }).add(chartCard) //.add(chartbutton) //.add(tablebutton)//removed table buttons for now
    //return the panel 
    return card
}

var pieCard = function (layerObject) {
    var chartCard = ui.Panel({
        style: Style.cardPanel

    }).add(ui.Label('ChartCard')) //(geometry, properties, holeSize)
    chartCard.add((charts.pieChart(clicked_basin_geom, layerObject, holeSize)))
    var chartbutton = ui.Button({
        label: 'Display results as chart',
        onClick: function () {
            //reset the panel 
            chartbutton.style().set({
                shown: false
            })
            tablebutton.style().set({
                shown: true
            })
            chartCard.clear()
            chartCard.add(charts.pieChart(clicked_basin_geom, layerObject, holeSize)) //(geometry, properties, holeSize)
        }
    })
    var tablebutton = ui.Button({
        style: {
            shown: false
        }, //hides the button initially 
        label: 'Display results as table',
        onClick: function () {
            //reset the panel 
            tablebutton.style().set({
                shown: false
            })
            chartbutton.style().set({
                shown: true
            })
            chartCard.clear()
            var chart = charts.histogramImage(layerObject.layer.eeObject, clicked_basin_geom,
                mapPanel.getScale()).setChartType('Table')
            chart.setOptions({
                allowHtml: true,
                pageSize: 5
            }).style().set({
                stretch: 'both'
            })
            chartCard.add(chart)

        }
    })
    //make a panel to hold it 
    var card = ui.Panel({
        style: Style.cardPanel
    }).add(chartCard) //.add(chartbutton) //.add(tablebutton)//removed table buttons for now

    //return the panel 
    return card
}

//**function for buttons to display layers on map
var layerButton = function (layerObject) {

    return ui.Panel([
        //addbutton//, 
        ui.Button({
            label: 'Show Layer',
            onClick: function () {
                print('click function started')
                print(clicked_basin_fc)
                mapPanel.layers().reset()
                mapPanel.layers().add(layerObject.layer)

                //make an opacity mask to display watershed 
                var con = ee.Image(1).byte().clip(clicked_basin_geom) //check
                var shade = ee.Image(1).byte()
                var opacityMask = shade.where(shade.eq(con), 0).selfMask()
                var empty = ee.Image().byte()
                var outline = empty.paint(clicked_basin_fc, 1, 2);
                mapPanel.addLayer(opacityMask, {
                    palette: '000000',
                    opacity: 0.6
                });
                mapPanel.addLayer(outline, {
                    palette: 'whitesmoke'
                }, 'edges')
                legendPanel.style().set({
                    shown: true
                })
                makeLegend(layerObject)
            }

        }),
        //removebutton
        ui.Button({
            label: 'Remove Layer',
            onClick: function () {
                mapPanel.layers().reset()
                var empty = ee.Image().byte()
                var outline = empty.paint(clicked_basin_fc, 1, 2);
                mapPanel.addLayer(outline, {
                    palette: 'whitesmoke'
                }, 'edges')

                legendPanel.style().set({
                    shown: false
                }) //remove(eeObject.layer)
                print(mapPanel.layers())
                // addbutton.style().set({
                //     shown: true
            }
        })


    ]).setLayout(ui.Panel.Layout.flow('horizontal'))

}




/** Returns a ui.Map with some UI configuration in place */
function makeMapPanel() {
    var map = ui.Map({
        style: {
            //width: '61.8%',
            //stretch: 'vertical',
            //margin: '0'
        }
    });
    map.setOptions('Dark', Style.mapStyles)
    map.setControlVisibility({
        all: false,
        zoomControl: true,
        mapTypeControl: true,
        layerList: true,
        fullscreenControl: true
    });
    return map;
}
var makeHeader = function () {
    var header = ui.Panel({
        style: {
            width: '100%',
            //height:'60px',
            border: '1px solid darkgray',
            backgroundColor: 'white'
        }
    })
   // header.
    return header
}; 
var makeFooter = function () {
    var footer = ui.Panel({
        style: {
            width: '100%',
            //height:'60px',
            border: '1px solid darkgray',
            backgroundColor: 'white'
        }
    })
    return footer
}
/*function addReports() {

    // mapPanel.clear()

    var reportTitle = ui.Label({
        value: 'Layers',

    });
    reportsPanel.add(reportTitle);

}*/

/* 
Object (6 properties)
DissolvedCopper: Object (6 properties)
Imperviousness: Object (6 properties)
Lithology: Object (6 properties)
Population: Object (6 properties)
Precipitation: Object (6 properties)
Runoff: Object (6 properties)
Slope: Object (6 properties)
Soils: Object (6 properties)
landCover: Object (6 properties)
landUse: Object (6 properties)
*/
//} 
var mainPanel = ui.Panel({widgets: watershedSelect, 
    layout: ui.Panel.Layout.flow('vertical', true),
    style: {
        stretch: 'vertical',
       // margin: '500px',
        //padding: '100px', 
        height: '85%',
        width: '38.2%', //the golden ratio!',
        position: 'top-left',
      //  border: '1px solid silver'
        //shown: true, 
        //backgroundColor: colors.transparent
    }
});
var subPanel = ui.Panel({
    layout: ui.Panel.Layout.flow('vertical', true),
    style: {
        stretch: 'horizontal',
        border: '0.5px solid #8c8c8c'
        //height: '80%',
        //width: '20%',
        //position: 'top-left'
    }
})
var hPanel = ui.Panel({
    layout: ui.Panel.Layout.flow('horizontal', true),
    style: {
        stretch: 'horizontal',
        //height: '80%',
        //width: '20%',
        //position: 'top-left'
    }
})
// App title and information 
var titleLabel = ui.Label({
    value: 'Watershed Insights',
    style: fonts.H1})
var descriptionText = 'This app allows you to interactively explore heatmap data by watershed.';
var descriptionLabel = ui.Label(descriptionText);
var watershedSelectLabel = ui.Label({
    value: 'Select a watershed dataset:',
});
var reportsPanel = ui.Panel({
    style: { // position: 'top-right',
        width: '75%',
        //   height: '25%',
        padding: '12 px',
        backgroundColor: colors.transparent,
        stretch: 'horizontal',
        position: 'bottom-right'
    },

}).setLayout(ui.Panel.Layout.flow('horizontal'));

var legendPanel = ui.Panel({
    style: {
        position: 'bottom-right',
        // width: '20%',
        //height: '80%',
        padding: '12 px',
        backgroundColor: colors.transparent,
        stretch: 'both',
        shown: false,
        // position: 'top-right'
    },

}).setLayout(ui.Panel.Layout.flow('vertical'));

var blankPanel = ui.Panel({
    style: {
        backgroundColor: colors.pDark,
        width: '100%',
        //height: '4px'
    }
});
var instructionsPanel = ui.Panel()
var mapInfoPanel = ui.Panel({
    style: {
        shown: false,
        position: 'bottom-center'
    }
})
//options for charting 
var singleBar = {
    height: 100,

    series: {
        0: {
            color: '4BE3A6', //border: '1px solid black', 
            visibleInLegend: false,
            strokeWidth: 4
        },
        1: {
            color: 'cfcfcf', //dataOpacity: 0.50, 
            visibleInLegend: false
        }
    },
    legend: {
        position: 'none'
    },
    bar: {
        groupWidth: "61.8%"
    },
    chartArea: {
        width: '80%',
        height: '20%'
    },
    isStacked: 'percent',
    vAxis: {
        textPosition: 'none'
    },
    hAxis: {
        textPosition: 'none',
        gridlines: {
            color: 'transparent'
        },
    },
};

var imageBar = ({
    chartArea: {
        left: '38%'
    }, //style for horizontal image bar 
    hAxis: {
        title: 'Area (acres)',
        minValue: 0,
    },
    legend: {
        position: 'none'
    },

})


var makeReports = function () {

    var pchart = charts.littleNum(layerProperties.Precipitation, 
    clicked_basin_geom, mapPanel.getScale(), 'mean')
    var holderpan = ui.Panel({
        layout: ui.Panel.Layout.flow('horizontal'), 
      //  style: {stretch: 'both'}
    })
    var pchart2 = charts.histogramImage(
        layerProperties.Precipitation, clicked_basin_geom,
        mapPanel.getScale()
    )
    //holderpan.add(pchart).add(pchart2)
    //pchart2.setOptions()
    var laybut = layerButton(layerProperties.Precipitation)
    var precipCard = cards('Precipitation', [pchart, pchart2, laybut])
    mainPanel.add(precipCard)

    //make a landuse card //geometry, properties, holeSize
    //make a bar chart of imperviousness
    var impChart = charts.stackedBar(layerProperties.Imperviousness, mapPanel.getScale(), clicked_basin_geom)
    impChart.setOptions(singleBar)
    //make a number card
    var impNum = charts.littleNum(layerProperties.Imperviousness, clicked_basin_geom, mapPanel.getScale(), 'percent')
    //make a panel to hold the two, 
    //var holderpanLU = ui.Panel({
    //    layout: ui.Panel.Layout.flow('horizontal')
    //})
    //add to the panel
    //holderpanLU.add(impNum).add(impChart)

    var luchart = charts.pieChart(clicked_basin_geom, layerProperties.landUse, mapPanel.getScale()).setChartType('BarChart')
    luchart.setOptions(imageBar)
    var lcchart = charts.pieChart(clicked_basin_geom, layerProperties.landCover, mapPanel.getScale()).setChartType('BarChart')
    lcchart.setOptions(imageBar)
    var luCard = cards('Land Use', [impNum, impChart, layerButton(layerProperties.Imperviousness),
        luchart,
        layerButton(layerProperties.landUse),
        lcchart, layerButton(layerProperties.landCover)
    ])
    mainPanel.add(luCard)

    //Make a card for Age of Development 
    //show percent developed prior to 1999
    var ageCard = charts.pieChart(clicked_basin_geom, layerProperties.DevAge, mapPanel.getScale())
    ageCard.setChartType('BarChart')
    ageCard.setOptions(imageBar)
    var ageCard = cards('Age of Development', [ageCard, layerButton(layerProperties.DevAge)])
    mainPanel.add(ageCard)
    //Make a card for soils and Lithology
    var soilsChart = charts.pieChart(clicked_basin_geom, layerProperties.Soils, mapPanel.getScale()) //soils and lithology 
    soilsChart.setChartType('BarChart');
    soilsChart.setOptions(imageBar)
    var lithChart = charts.pieChart(clicked_basin_geom, layerProperties.Lithology, mapPanel.getScale()) //soils and lithology   //var soilsCard = resultCard('Soils and Lithology'); 
    lithChart.setChartType('BarChart');
    lithChart.setOptions(imageBar)
    var soilsCard = cards('Soils and Lithology', [soilsChart, layerButton(layerProperties.Soils), hline(), lithChart, layerButton(layerProperties.Lithology)])
    mainPanel.add(soilsCard)

    //Make a panel for topography 
    var topoChart = charts.histogramImage(layerProperties.SlopeCont, clicked_basin_geom, mapPanel.getScale())
    topoChart.setOptions({
        title: 'Distribution of Slope in the Watershed'
    })
    var topoCats = charts.pieChart(clicked_basin_geom, layerProperties.Slope, mapPanel.getScale())
    topoCats.setChartType('BarChart')
    topoCats.setOptions(imageBar)
    var topoCard = cards('Topography', [topoChart, layerButton(layerProperties.SlopeCont), hline(), topoCats, layerButton(layerProperties.Slope)])
    print('topcard ok')
    mainPanel.add(topoCard)
    //Make a panel for pollutants 
    //copper 
    //ToDo

}

//cards function 
print('cards function')
var cards = function (title, widgetItems) {
    var cardTitle = ui.Label({
        value: title,
        style: fonts.H2
    })
    var wholeCard = ui.Panel({
        widgets: widgetItems,
        style: {
            border: '8px solid whitesmoke',
            padding: '12px'
        }
    })
    wholeCard.insert(0, cardTitle)
    //wholeCard.add(widgetItems)
    return wholeCard
}

var deactiv_button = ui.Button({
    label: 'Reset Map',
    //onClick: mapReset,//also clear side panel 
});
var accept = ui.Button({
    // label: 'Accept Selected Watershed',
    label: 'Accept Selected Watershed ',
    onClick: function () {
        mainPanel.style().set({
            shown: true
        }); //show the side panel
        mapPanel.add(legendPanel) //add legend panel to the map
        makeReports() //also clear side panel todo
        buttonPanel.style().set({
            shown: false
        })
    }
});



print(393)
var inspect_button = ui.Button({
    label: 'Activate inspector',
    onClick: handle_inspect_click
});
//function to add user layer to the map
var buttonPanel = ui.Panel({
    widgets: [inspect_button, accept],
    layout: ui.Panel.Layout.flow('vertical'),
    style: {
        // backgroundColor: 'whitesmoke',
        position: 'top-left',
        stretch: 'both'
    }
});

//Labels 
var step1 = ui.Label('1) Select a watershed dataset to use', fonts.Body1)
var step2 = ui.Label('2) Select a watershed on the map to analyze', fonts.Body1)
var step3 = ui.Label('3) Select a category to view results', fonts.Body1)
//Selectors 

var watershedSelect = ui.Select({
    items: Object.keys(vectors),
    placeholder: 'Select a value',
    //value: 'HUC 12'
    onChange: function (selected) {
        mapPanel.layers().reset()
        print(selected)
        var WS = vectors[selected]
        mapPanel.addLayer(WS)
        mainPanel.add((buttonPanel))

    }
});
// var selectItems = ['Debug', 'Precipitation', 'Land Cover/Land Use',
//     'Population', 'Hydrology', 'Stormwater Pollutants'
// ]
// print(selectItems)
//var layerDict = ee.Dictionary(layerProperties);
// Define the pulldown menu.  Changing the pulldown menu changes the map layer
// and legend.
// var reportsSelect = ui.Select({
//     //items: ee.List(layerDict.get('names')),
//     items: selectItems,
//     placeholder: 'Select a value',
//     //value: 'HUC 12'
//     onChange: addreports
// });

/* 
Set up User Interface
----------------------------------------------------------------------------------------------------
*/

function mapReset() {
    mapPanel.layers().reset()
    //mapPanel.setCenter(mapCenterLon, mapCenterLat, 8)
    /*mapPanel.setOptions('Dark', {
        'Dark': mapStyle.GRAYMAP
    })*/
    mapPanel.setControlVisibility({
        all: false,
        zoomControl: true,
        mapTypeControl: true,
        layerList: true,
        fullscreenControl: true

    });
}
//mapPanel.setOptions('Dark', {'Dark': mapStyle.Dark});
//redraw()
print('449')
// Clear the default UI 
ui.root.clear();
// Create the app's two panels and add them to the ui.root as a split panel
var sidePanel = makeSidePanel();
var mapPanel = makeMapPanel();
var header = makeHeader();
//header.add(ui.Label('header'))
var footer = makeFooter();
footer.add(ui.Label('footer'))
//sidePanel.add(ui.Label('sidePanel'))
//mapPanel.add(ui.Label('mapPanel'))
ui.root.setLayout(ui.Panel.Layout.flow(
    'vertical'))
ui.root.add(header)
ui.root.add(/*ui.SplitPanel(
    ui.Panel({
        style: {
            width: 0, //'38.2%',
            backgroundColor: 'white',
            // border: '1px solid silver',
            stretch: 'vertical',
            margin: '12px',
            padding: 0
        }
    }) //.add(ui.Label('colMask'))
    .add(sidePanel)*/
    mapPanel);
mapPanel.add(mapInfoPanel);
mapPanel.add(mainPanel); 
mainPanel.add(titleLabel); 
mainPanel.add(watershedSelect)
ui.root.add(footer)
//---------------- set the initial view
var mapCenterLon = -122.423145;
var mapCenterLat = 47.612410;
mapPanel.setCenter(mapCenterLon, mapCenterLat, 7)
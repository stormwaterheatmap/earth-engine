/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var image = ee.Image("projects/ee-stormwaterheatmap/assets/production/Mean_Annual_Q_8_epochs"),
    geometry = /* color: #d63000 */ee.Geometry.Point([-122.07017343864267, 47.54032480863896]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/

var water = ee.Image("JRC/GSW1_3/GlobalSurfaceWater").select('occurrence')

var watermask = ee.Image(1).blend(water.eq(0))

var Runoff = 

                {
                    "eeObject": image.mask(watermask).selfMask().focal_median(1),
                    "name": "Runoff (mm)",
                    "visParams": 
                        { "bands": 'runoff_1980s',
                            "min": 25,
                            "max": 1016,
                            "palette": ["eafdfd","9cd4da","61a8c7","427bb7","3f4b96","292851","040613"],
                            "opacity":1}}
                            
Map.addLayer(Runoff)                          

//function takes a point and returns a chart 

// Get Red and SWIR value lists; to be plotted along x and y axes, respectively.
// Note that the pixelVals object is defined in the previous code block.
var pixelVals = Runoff.eeObject.reduceRegion(
    {reducer: ee.Reducer.mean(), geometry: geometry, scale: 10});
print(pixelVals)
var x = ee.List([1980,2030,2040,2050,2060,2070,2080]);
var y = ee.List(pixelVals.values());

// Define the chart and print it to the console.
var chart = ui.Chart.array.values({array: y, axis: 0, xLabels: x})


chart.setOptions({
   title: 'Estimated runoff over time',
  vAxis: {title: 'Mean Annual Runoff (mm)', 
    //  viewWindow: {min: 0}
  },
  hAxis: {title: 'year', format: ''},
  pointSize: 4,
  
 // explorer: {},

  trendlines: {
    0: {  // add a trend line to the 1st series
      type: 'linear',  // or 'polynomial', 'exponential'
      color: 'green',
      lineWidth: 2,
      lineDashStyle: [4, 4],
      opacity: 0.8,
      //visibleInLegend: true,
    }
  }
})
Map.add(chart);



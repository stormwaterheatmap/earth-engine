/* /Map with clickable heatmap layers showing: 
1. Landcover 
2. Hydrology 
   a. Mean annual runoff 
   b. Flow Duration Index 
   c. HRUs 
    - soils 
    - slopes
    - HSPF Landcover  
3. Water Quality 
  a. Predictors 
  b. One constituent. 
*/ 
//Load Datasets from the dataset module 
var datasets = require(
     'users/stormwaterheatmap/apps:Modules/datasets');
 var rasters = datasets.rasters
 print(rasters)
var watersheds = datasets.vectors.PS_AU
// var data = require('users/stormwaterheatmap/apps:Modules/datasets')
var Style = require('users/stormwaterheatmap/apps:Modules/Style')
// var charts = require('users/stormwaterheatmap/apps:Modules/chart')
var legends = require('users/stormwaterheatmap/apps:Modules/legends')
var fonts = Style.fonts //var panelStyle = Style.panelStyle//print(panelStyle)
var infoPanel = ui.Panel()
///----------------------------------------------------------------------
///---functions
function handleMapClick(location) {
  selectedPoints.push([location.lon, location.lat]);
  updateOverlay();
  updateChart();
}
function getSelectedwatershed() {
  return watershed.filterBounds(ee.Geometry.MultiPoint(selectedPoints));
}
function updateOverlay() {
  var overlay = getSelectedwatershed().style(HIGHLIGHT_STYLE);
  Map.layers().set(2, ui.Map.Layer(overlay));
}
function updateChart() {
  var chartBuilder = chartTypeToggleButton.value;
  var chart = chartBuilder(getSelectedwatershed());
  resultsPanel.clear().add(chart).add(buttonPanel);
}
function ColorBar(palette) {
    return ui.Thumbnail({
        image: ee.Image.pixelLonLat().select(0),
        params: {
            bbox: [0, 0, 1, 0.1],
            dimensions: '200x20',
            format: 'png',
            min: 0,
            max: 1,
            palette: palette,
        },
        style: {
            stretch: 'horizontal',
            margin: '0px 12px',
            position: 'bottom-left'
        },
    });
}
var barLegend = function (obj) {
    //  var labelPanel = ui.Panel(

    var palette = obj.layer.visParams.palette
    var low = obj.layer.visParams.min
    var high = obj.layer.visParams.max
    var mid = (low + high) / 2
    var labelPanel = ui.Panel(
        [
            ui.Label(low, {
                margin: '4px 8px',
                textAlign: 'left',
                stretch: 'horizontal'
            }),
            ui.Label(mid, {
                margin: '4px 8px',
                textAlign: 'center',
                stretch: 'horizontal'
            }),
            ui.Label(high, {
                margin: '4px 8px',
                textAlign: 'right',
                stretch: 'horizontal'
            })
        ],
        ui.Panel.Layout.flow('horizontal'),

        //    labelPanel.add(ui.Label(obj.units))
        {
            width: '230px',
            position: 'top-center'
        }
    );

    var unitlabel = (ui.Label(obj.units))
    var barTitle = (ui.Label({
        value: obj.layer.name,
        style: fonts.LegendTitle
    }))

    var barPanel = ui.Panel({
        widgets: [barTitle, ColorBar(palette), labelPanel, unitlabel],
        style: {
            position: 'bottom-left',
            padding: '12px'
        }
    })

    return barPanel
}

ui.root.clear();
//ui.root.setLayout(ui.Panel.Layout.Flow("horizontal"))
var panel = ui.Panel({
        style: {
             width:'30%', //the golden ratio!
            backgroundColor: 'whitesmoke',
            //  border: '1px solid silver',
            //margin:'0',
            padding: '12px',
            shown: true,
            //stretch: 'horizontal'
        }
    })
panel.add(ui.Label("Puget Sound Stormwater Heatmap"))

var map = ui.Map({onClick:ins}) 
map.setCenter(-122,48,8)
var ins = map.onClick(function(coords) {
  // Show the loading label.
  print('mapClicked!')
  print(coords)
  inspector.widgets().set(0, ui.Label({
    value: 'Loading...',
    style: {color: 'gray'}
  }));
  var click_point = ee.Geometry.Point(coords.lon, coords.lat);
  print(click_point)
  var lays = (Map.layers())
  var selLay = map.layers().get[0]
  print(selLay)
  // compute value, a long running operation
  // var computedValue = selLay.reduceRegion({
  //   reducer:ee.Reducer.first(), 
  //   geometry:click_point, scale:10,
  //   bestEffort:true})
  
  // computedValue.evaluate(function(result) {
  //       inspector.widgets().set(0, ui.Label({
  //       value: result})
  //       )
  //   }
 // );
})

ui.root.add(panel).add(map);


print(ui.root.getLayout())
///PanelFunction 
// Create a panel and add it to the map.
var inspector = ui.Panel({widgets:[ui.Label('Click on the point')],style:{position:'bottom-left'}});



//Map a selector with the layers
//var layerList = ee.Object.keys(rasters)
var layerdict = ee.Dictionary(rasters)
var Runoff = layerdict.get('Runoff')






var layersToShow =({
  "Landcover": "landCover",
  "Hydrology - Mean annual runoff": "Runoff_in",
  "Hydrology - Flow Duration Index": "Runoff_in", 
"Pollutant Loading - Total Copper concentration": "Lithology",
"Pollutant Loading - Total Copper Load": "Slope"})
var select_items = Object.keys(layersToShow)
//var select_vals = Object.values(layersToShow)
print(layersToShow,'layerstoshow')
var lc = (rasters["landCover"])
print(lc,'lc')
print(lc.labels,'units')
//print(select_vals)
//print(select_items,'selectitems')


var imageSelect = ui.Select({
  items: select_items,
  onChange: function(value) {
    //clear layers 
    map.clear()
    //add the layer 
    var key = (layersToShow[value])
    var layerObject = rasters[key]
    var layer = layerObject.layer
    map.addLayer(layer.eeObject,layer.visParams,layer.name)
    //add the legend
      //what type of legend 
      if (layerObject.discrete) {
        print('true! ')
        var legend = (legends.discreteLegend(layerObject))
    } else {
         legend = (barLegend(layerObject))}
    map.add(legend) 

    //add the info
    infoPanel.clear()
    var infoLabel = ui.Label({value:layerObject.layer.name.concat(
      layerObject.sourceName), style:fonts.b1})
    infoPanel.add(infoLabel)
    //MapOnclick property
    map.add(inspector)

// Set the default map's cursor to a "crosshair".
  map.style().set('cursor', 'crosshair');

// Register a callback on the map to be invoked when the map is clicked.
  map.onClick(function(coords) {
  // Clear the panel and show a loading message.
  inspector.clear();
  inspector.style().set('shown', true);
  inspector.add(ui.Label('Loading...', {color: 'gray'}));

  // Compute the mean NDVI; a potentially long-running server operation.
  var point = ee.Geometry.Point(coords.lon, coords.lat);
  var temporalMean = (layer.eeObject).reduce(ee.Reducer.mean());
  var sampledPoint = temporalMean.reduceRegion(ee.Reducer.first(), point, 30);
  var computedValue = sampledPoint.get('mean');
  
  // Request the value from the server and use the results in a function.
  computedValue.evaluate(function(result) {
    inspector.clear();

    // Add a label with the results from the server.
    inspector.add(ui.Label({
      value: 'Value: ' + result.toFixed(2),
      style: {stretch: 'vertical'}
    }));

    // Add a button to hide the Panel.
    inspector.add(ui.Button({
      label: 'Close',
      onClick: function() {
        inspector.style().set('shown', false);
      }
    }));
  });
});
  }
});

panel.add(imageSelect)
panel.add(infoPanel)


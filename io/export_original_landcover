/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var table = ee.FeatureCollection("users/cnilsen/PugetSound_boundary");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/**** Start of imports. If edited, may not auto-convert in the playground. ****/

/***** End of imports. If edited, may not auto-convert in the playground. *****/
//OUTPUTS

var paletteInput2 = ['white', '#b6bc5f',
    'darkgreen', '#004e00',
    'beige', 'black', 'pink',
    'brown'
] //,'cyan']; //more true color


var psLandcover_roofs = 
ee.Image("users/jrobertson2000/psLandCover_1m_finPS_roofs").byte()
//reproject({crs:'EPSG:3857'})
print(psLandcover_roofs)
Map.addLayer(psLandcover_roofs
    .focal_mode(), {
        min: 0,
        max: 7,
        palette: paletteInput2,
        opacity: 1.0
    }, 'final exported', 1);

var grid = table.geometry()
    .coveringGrid(table.geometry()
        .projection(), 140000)
    .randomColumn()
Map.addLayer(grid)
for(var i = 0; i < grid.size()
    .getInfo(); i++) {
    print('step', i)
    var region = ee.Feature(grid.toList(
                grid.size())
            .get(i))
        .geometry()
    var img = psLandcover_roofs
    var scale = 1
    var layer_description = "Landcover"
        .replace(/\s/g, '_')
        .replace(/\)/g, '')
        .replace(/\(/g, '')
    print(layer_description)
    Export.image.toCloudStorage({
        image: img,
        description: i + '_' +
            layer_description,
        bucket: 'swhm-image-exports',
        maxPixels: 1e13,
        scale: scale,
        region: region,
        skipEmptyTiles: true, 
        fileNamePrefix: "lulc/"+layer_description +
            "/" +
            layer_description +
            "_" + i,
        fileFormat: 'GeoTIFF',
        formatOptions: {
            cloudOptimized: true
        }
    })
}
var ids = grid.toDictionary(['id'])
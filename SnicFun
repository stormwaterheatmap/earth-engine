/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var image = ee.Image("NASA/ASTER_GED/AG100_003"),
    image2 = ee.Image("USGS/NED"),
    image3 = ee.Image("users/cnilsen/TSSLoad"),
    image4 = ee.Image("users/cnilsen/Runoff1980s5m"),
    imageVisParam = {"opacity":1,"bands":["sum_mean"],"min":104.44167480468751,"max":939.9750732421875,"palette":["f3e79b","fac484","f8a07e","eb7f86","ce6693","a059a0","5c53a5"]},
    table = ee.FeatureCollection("users/cnilsen/Sammamish/LJWatershed"),
    imageCollection = ee.ImageCollection("USDA/NAIP/DOQQ"),
    geometry = 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-122.31561582851873, 47.797117912682914],
          [-122.31561582851873, 47.70848060240823],
          [-122.19476621914373, 47.70848060240823],
          [-122.19476621914373, 47.797117912682914]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var data = require('users/stormwaterheatmap/apps:Modules/datasets')
var Style = require('users/stormwaterheatmap/apps:Modules/Style')
var charts = require('users/stormwaterheatmap/apps:Modules/chart')
var legends = require('users/stormwaterheatmap/apps:Modules/legends')
var layerProperties = data.rasters

function uSnic(size, compactness, scale, geometry) {
        var naip = ee.ImageCollection('USDA/NAIP/DOQQ')
            .filterDate('2017-01-01', '2019-01-01')
            .filterBounds(geometry).mosaic().clip(geometry);
        naip = ee.Image(naip)
            .divide(255); //normalizes NAIP
        var ndvi = naip.normalizedDifference(['N', 'R'])
            .rename('NDVI');
        var ndviGradient = ndvi.gradient()
            .pow(2)
            .reduce('sum')
            .sqrt();
        //Map.addLayer(ndviGradient, {}, 'graddd', 0);
        var img = ee.Image.cat(naip, ndviGradient)
            .clip(geometry);
        var snic = ee.Algorithms.Image.Segmentation.SNIC({
            size: size,
            image: img,
            compactness: compactness,
        })
        return snic//.reproject({ crs: 'EPSG:3857', scale: 100 })
    }
    //button 

var snicButton = ui.Button({
        label: 'Begin clustering',
        onClick: function () {
            print('click!')
            print(sizeSlide.getValue())
            print(compactnessSlide.getValue())
            var layer = uSnic(sizeSlide.getValue(), compactnessSlide.getValue(),100,geometry)
            var clusters = layer.select(0)
            Map.addLayer(clusters.randomVisualizer(), {}, 'clusters')
            var meanVals = layer.select(1)
            Map.addLayer(meanVals, {}, 'mean vals', 0)
        }
    })

    //panel to hold controls 

//make panel; size, compactness 
var sizeSlide = ui.Slider(0,96,5,1)
var compactnessSlide = ui.Slider(0,16,1,1)

sizeSlide.style().set('width', '100%');
compactnessSlide.style().set('width', '100%')    
    
var controlPan = ui.Panel({
        style:
            { width: '400px' }
    });

    controlPan.add(ui.Label('Size'))
        .add(sizeSlide)
        .add(ui.Label('compactness'))
        .add(compactnessSlide)
        .add(snicButton)


    var panel = controlPan;

    ui.root.add(panel)
    Map.centerObject(geometry)



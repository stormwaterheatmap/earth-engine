/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "marker"
      },
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Point",
          "coordinates": [
            -122.05868163496143,
            47.53760459472781
          ]
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -122.2029815351526,
                47.924780735833785
              ],
              [
                -122.2029815351526,
                47.81423283325169
              ],
              [
                -121.9832549726526,
                47.81423283325169
              ],
              [
                -121.9832549726526,
                47.924780735833785
              ]
            ]
          ],
          "geodesic": false,
          "evenOdd": true
        }
      ],
      "coordinates": []
    });
/***** End of imports. If edited, may not auto-convert in the playground. *****/

var data  = require('users/stormwaterheatmap/apps:data/data_dict_v4')
var Style = require('users/stormwaterheatmap/apps:Modules/Style')
var charts = require('users/stormwaterheatmap/apps:Modules/chart.js')
var style = Style
var helpers = require('users/stormwaterheatmap/apps:Modules/helpers')

var shed = data.vector_dict["Puget Sound Assessment Units"].filterBounds(geometry)
//Map.addLayer(shed)



function coc_mean_conc(layerObj, region, scale) {
  //text for loading whil calucations happen 
  var units = layerObj.units;
  var loading = 'loading...';
  var bigNum = ui.Label({
    value: loading,
    style: style.fonts.Body3
  });
  bigNum.style()
    .set({
      margin: 2,
      padding: 2,
      width: '100%',
      fontSize: '30px',
      fontFamily: ['Roboto', 'Helvetica Neue',
        'Arial', 'sans-serif'
      ],
      fontWeight: 500,
      //  border: '1px solid blue', 
      backgroundColor: style.colors.transparent,
      textAlign: 'right',
    });

  var title_value = layerObj.layer.name;


  var titleLabel = ui.Label({
    value: title_value,
    style: style.fonts.H4
  });
  titleLabel.style()
    .set({
      margin: '2px',
      padding: '2px',
      stretch: 'both',
      width: '100%',
      textAlign: 'right',
      //   border: '1px solid red'
    });
  units = ui.Label({
    value: units,
    style: style.fonts.Caption2
  });
  units.style()
    .set({
      textAlign: 'right',
      width: '100%',
      margin:2
    });

  var numPan = ui.Panel({
    layout: ui.Panel.Layout.flow('vertical',true),
    style: {
      textAlign: 'right',
      padding: 2,
      margin: 4,
    }
  }); //height: '200px'}}); 
  numPan.add(titleLabel); //.add(infoLabel)
  
    
    var num_unit_panel = ui.Panel({widgets:[bigNum],
    layout:ui.Panel.Layout.flow('horizontal'),
      style:{width: '100%',stretch:'both'}
    })
  numPan.add(num_unit_panel);

  numPan.add(units);
  // var infoLabel = ui.Label({
  //   style: style.fonts.Caption3
  // });
  // infoLabel.style()
  //   .set({
  //     margin: 0,
  //     padding: 2,
  //     fontSize: '10px',
  //     textAlign: 'right',
  //     //   border: '1px solid green',
  //     //width: '80%',
  //     color: style.colors.sDark,
  //   });
  // var labelText = (
  //   'Scale of Analysis: ' + scale + ' sq.m/pixel' + /n/ + scale);
  // var labelText2 = ui.Label({
  //   style: style.fonts.Caption3
  // });
  // labelText2.style()
  //   .set({
  //     //   margin: 0, //fontSize: '10px',
  //     //color:style.colors.sDark,
  //     margin: 2,
  //     padding: 2,
  //     textAlign: 'right',
  //     width: '80%',
  //     //      border: '1px solid pink', 
  //     fontSize: '10px',
  //   });
  // //labelText2.setValue('Source: ' + layerObj.sourceName);
  // //labelText2.setUrl(layerObj.sourceUrl);
  // //infoLabel.setValue(labelText);
  // //numPan //.add(infoLabel)
  //   //.add(labelText2); //.add(labelText2)



  //if(reducerType == 'mean') {
  var reduced = ee.Number((layerObj.layer.eeObject.select(0))
    .reduceRegion({
      reducer: ee.Reducer.mean(),
      geometry: region,
      scale: scale,
      maxPixels: 100000,
      bestEffort: true
    })
    .get(layerObj.layer.eeObject.bandNames()
      .get(0)));
  reduced.evaluate(function (result) {
    // When the server returns the value, show it.
    bigNum.setValue(result.toPrecision(2));
  });
  //  
  return numPan;
}

var data = require('users/stormwaterheatmap/apps:data/data_dictionary.js')

print(data.cocs)

var concentration_objects = [
  'Total Copper Concentration',
  'Total Kjeldahl Nitrogen Concentration',
  'Total Phosphorus Concentration',
  'Total Suspended Solids Concentration',
  'Total Zinc Concentration']

var stacked = ee.Dictionary(data.cocs).select(concentration_objects) 
print(stacked)

var img = ee.Image.cat(
  data.cocs[concentration_objects[0]].layer.eeObject.select(0),
  data.cocs[concentration_objects[1]].layer.eeObject.select(0),
  data.cocs[concentration_objects[2]].layer.eeObject.select(0),
 // data.cocs[concentration_objects[3]].layer.eeObject.select(0),
  data.cocs[concentration_objects[4]].layer.eeObject.select(0)
  )


Map.addLayer(img)
var red = img.reduceRegion({
  reducer: ee.Reducer.mean(), 
  scale: 100, 
  geometry: geometry
})
print(red)
var chart = ui.Chart.image.regions(img, geometry, ee.Reducer.mean(), 100)
print(chart)

var pan = ui.Panel({layout:ui.Panel.Layout.flow('horizontal',true), 
  style: {maxWidth: '400px'}
}) 
pan.add(coc_mean_conc(data.cocs[concentration_objects[4]],geometry,100)).add(
  coc_mean_conc(data.cocs[concentration_objects[1]],geometry,100)).add(
    coc_mean_conc(data.cocs[concentration_objects[2]],geometry,100)).add(
    coc_mean_conc(data.cocs[concentration_objects[3]],geometry,100)).add(
      coc_mean_conc(data.cocs[concentration_objects[0]],geometry,100))
Map.add(pan)
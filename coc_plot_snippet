/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "marker"
      },
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Point",
          "coordinates": [
            -122.05868163496143,
            47.53760459472781
          ]
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -122.2029815351526,
                47.924780735833785
              ],
              [
                -122.2029815351526,
                47.81423283325169
              ],
              [
                -121.9832549726526,
                47.81423283325169
              ],
              [
                -121.9832549726526,
                47.924780735833785
              ]
            ]
          ],
          "geodesic": false,
          "evenOdd": true
        }
      ],
      "coordinates": []
    });
/***** End of imports. If edited, may not auto-convert in the playground. *****/

var data  = require('users/stormwaterheatmap/apps:data/data_dict_v4')
var Style = require('users/stormwaterheatmap/apps:Modules/Style')
var charts = require('users/stormwaterheatmap/apps:Modules/chart.js')
var style = Style
var helpers = require('users/stormwaterheatmap/apps:Modules/helpers')

var shed = data.vector_dict["Puget Sound Assessment Units"].filterBounds(geometry)
//Map.addLayer(shed)



function coc_load(layerObj, region, scale,units) {
  //text for loading whil calucations happen 
 
  var loading = 'loading...';
  var bigNum = ui.Label({
    value: loading,
    style: style.fonts.Body3
  });
  bigNum.style()
    .set({
      margin: 2,
      padding: 2,
      width: '95%',
      fontSize: '30px',
      fontFamily: ['Roboto', 'Helvetica Neue',
        'Arial', 'sans-serif'
      ],
      fontWeight: 500,
    //   border: '1px solid blue', 
      backgroundColor: style.colors.transparent,
      textAlign: 'right',
    });

  var title_value = layerObj.layer.name;


  var titleLabel = ui.Label({
    value: title_value,
    style: style.fonts.H4
  });
  titleLabel.style()
    .set({
      margin: '2px',
      padding: '2px',
      stretch: 'both',
      width: '98%',
      //height: "50px",
      textAlign: 'right',
      //   border: '1px solid red'
    });
  units = ui.Label({
    value: units,
    style: style.fonts.Caption2
  });
  units.style()
    .set({
      textAlign: 'right',
      width: '100%',
      margin:2
    });

  var numPan = ui.Panel({
    layout: ui.Panel.Layout.flow('vertical',true),
    style: {
      textAlign: 'right',
     // stretch: 'horizontal',
      //padding: 2,
      //margin: 14,
      width: '180px',
      //border: '1px solid orange'
    }
  }); //height: '200px'}}); 
  numPan.add(titleLabel); //.add(infoLabel)
  
    
    var num_unit_panel = ui.Panel({widgets:[bigNum],
    layout:ui.Panel.Layout.flow('horizontal'),
      style:{width: '100%',stretch:'both'}
    })
  numPan.add(num_unit_panel);

  numPan.add(units);
  
  //calculations 
  
  var total_load_per_m2 = ee.Number((layerObj.layer.eeObject.select(0))
    .reduceRegion({
      reducer: ee.Reducer.mean(),
      geometry: region,
      scale: scale,
      maxPixels: 100000,
      bestEffort: true
    })
    .get(layerObj.layer.eeObject.bandNames()
      .get(0)));
    var ws_area = region.area(2) 
 
    var total_load = total_load_per_m2.multiply(ws_area).multiply(1e-6) // do this for sigfigs
    
    
  total_load.evaluate(function (result) {
    // When the server returns the value, show it.
    bigNum.setValue(helpers.sigFigs(result,3).toLocaleString("en-US"));
  });
  //  
  return numPan;
}

var data = require('users/stormwaterheatmap/apps:data/data_dictionary.js')

print(data.cocs)

var Load_objects = [
  'Total Copper Load',
  'Total Kjeldahl Nitrogen Load',
  'Total Phosphorus Load',
  'Total Suspended Solids Load',
  'Total Zinc Load']

var stacked = ee.Dictionary(data.cocs).select(Load_objects) 
print(stacked)

var img = ee.Image.cat(
  data.cocs[Load_objects[0]].layer.eeObject.select(0),
  data.cocs[Load_objects[1]].layer.eeObject.select(0),
  data.cocs[Load_objects[2]].layer.eeObject.select(0),
 // data.cocs[Load_objects[3]].layer.eeObject.select(0),
  data.cocs[Load_objects[4]].layer.eeObject.select(0)
  )


Map.addLayer(img)
var red = img.reduceRegion({
  reducer: ee.Reducer.mean(), 
  scale: 100, 
  geometry: geometry
})
print(red)
var chart = ui.Chart.image.regions(img, geometry, ee.Reducer.mean(), 100)
print(chart)

var pan = ui.Panel({layout:ui.Panel.Layout.flow('horizontal',true), 
  style: {maxWidth: '400px',stretch:'horizontal'}
}) 
pan.add(coc_load(data.cocs[Load_objects[4]],geometry,100,'kg/yr')).add(
  coc_load(data.cocs[Load_objects[1]],geometry,100,'kg/yr')).add(
    coc_load(data.cocs[Load_objects[2]],geometry,100,'kg/yr')).add(
    coc_load(data.cocs[Load_objects[3]],geometry,100,'kg/yr')).add(
      coc_load(data.cocs[Load_objects[0]],geometry,100,'kg/yr'))
Map.add(pan)
/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var image2 = ee.Image("users/stormwaterheatmap/landcover"),
    landcover = ee.Image("users/stormwaterheatmap/hspf_landCover"),
    s8_sheds = ee.FeatureCollection("projects/ee-stormwaterheatmap/assets/s8_watersheds_v5");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var predictors = require('users/stormwaterheatmap/coc_layers:scaled_predictors')
predictors = predictors.scaled_predictors
var pred_bands = predictors.bandNames()
var watermask = landcover.neq(9)
predictors = predictors.mask(watermask)
 
var regression_coefficients = {
    //            intercept,      devage2,     grass,     paved,  pm25_na,  sqrt_CO2_road,  traffic
    'copper': [2.25, 0.56, 0, 0, 0.66, 0, 0.35],
    'tss': [10.17, 0, 0, 0.28, 0, 0, 0.21],
    'p': [4.38, 0, 0.83, 0.97, 0, 0.2, 0], 
  'tkn': [6.52, 0.22, 0, 0, 0, 0.28, 0], 
    'zinc': [4.09, 0, 0, 0.55, 0.33, 0, 0.29]
}

var bandNames = [
    "intercept",
    "devage2",
    "grass",
    "paved",
    "pm25_na",
    "sqrt_CO2_road",
    "traffic"
]

/**
 * Applies a convolution to a scaled and centered image. Clamps values to 
 * +/- 3 standard deviations (assuming dataset is scaled by sd)
 * Takes a coc name and generates a single band image. 
 */
function convolve_clamp_predictors(image) {
    var convolved_predictors = image.//unmask().
    reduceNeighborhood({
        skipMasked: true,
        reducer: ee.Reducer.mean(),
        kernel: ee.Kernel.gaussian({
            radius: 100,
            sigma: 80,
            units: 'meters'
        })
    })

    var convolved_clamped = convolved_predictors.clamp(-3, 3) //clamp to 3 standard deviations 
    return convolved_clamped
}

/**
 * Main function. Generates heatmap layer for a specific coc. 
 * Takes a coc name and generates a single band image. 
 */
function generate_coc_layer(coc_name, predictor_image) {
    // var regression_dict = ee.Dictionary.fromLists({
    //     keys: pred_bands,
    //     values: regression_coefficients[coc_name]
    // })

    //Get the regression parameters 
    var coc_parameters =  ee.Image.constant(regression_coefficients[coc_name]).rename(bandNames)

    // calculate the concentration 
    var coc_ug_L_scaled = coc_parameters.multiply(predictor_image)
            .reduce('sum')
        .rename(coc_name+"_concentration_ug_per_L")

    //transform back from log values  
    var coc_ug_L = coc_ug_L_scaled.exp()//.setDefaultProjection({
    //     crs: 'EPSG:3857'
    // }).reduceResolution({
    //     reducer: ee.Reducer.mean(),
    //     bestEffort: true
    // }).reproject({
    //     scale: 30,
    //     crs: 'EPSG:3857'
    // }) //reproject at a 30m scale to smooth out image 

    return (coc_ug_L)
}

var convolved_clamped = convolve_clamp_predictors(predictors)
var copper = generate_coc_layer("copper",convolved_clamped)
var p = generate_coc_layer("p",convolved_clamped)
var tss = generate_coc_layer("tss",convolved_clamped)
var tkn = generate_coc_layer("tkn",convolved_clamped)
var zinc = generate_coc_layer("zinc",convolved_clamped)

var all_cocs = copper.addBands(p).addBands(tss).addBands(zinc).addBands(tkn)
print(all_cocs.toDictionary())

var zinc_tkn = zinc.addBands(tkn)

var palettes = require('users/gena/packages:palettes');
var pal = palettes.kovesi.linear_bgyw_15_100_c67[7]

Map.addLayer(tkn,{},'tkn')
//Map.addLayer(copper.reduce('sum'),{},'copper sum')

var PugetSound = ee.FeatureCollection(
    "users/stormwaterheatmap/tables/PugetSound")

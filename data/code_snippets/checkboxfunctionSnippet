/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-122.32195503528891, 47.615011187997275],
          [-122.32195503528891, 47.52699119414934],
          [-122.20659858997641, 47.52699119414934],
          [-122.20659858997641, 47.615011187997275]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
function hline(pan) {
 pan.add( ui.Label( 
   {value:'null',
   style:{
  //width:'100%',
  height: '0px',
   padding: '0px ',
   margin: '0px 0px 0px 0px',
   border:  '0.5px solid gray',
   stretch:'horizontal',
   }}
   ));
}
//add all layers to map 
var data = require('users/stormwaterheatmap/apps:Modules/datasets')
var style = require('users/stormwaterheatmap/apps:Modules/Style')
var layerProperties = data.rasters
for (var key in layerProperties) {
  (layerProperties[key].shown = false); //({shown: false}));
  
}

print(layerProperties)
//clip all the layers
for (var key in layerProperties) {
  print (layerProperties[key])
  var layerVal =   layerProperties[key].layer//eeObject = 
  print(layerVal)
  layerVal.eeObject = layerVal.eeObject.clip(geometry)
  //layerProperties[key].layer.setShown(false)//({shown: false}); //shown = false
  Map.addLayer(layerProperties[key].layer.eeObject, 
  layerProperties[key].layer.visParams, 
  layerProperties[key].layer.name,0)
  //Map.layers().add(layerProperties[key].layer)
  //.setShown(false)
 // Map.layers().forEach().set({shown: false})
  print(Map.layers())
}  



  //layerVal.eeObject.shown = false 
 // checkbox(layerProperties[key])
 // layerVal.visParams.max
/*  var minMax  =   layerVal.eeObject.reduceRegion(
    {reducer: 
  ee.Reducer.percentile([1,99]),
bestEffort: true});

  // print (minMax)
     layerVal.visParams.min = ee.Number(minMax.get(0));
     layerVal.visParams.max = ee.Number(minMax.get(1));
*/ 


//print(style.fonts)
//make a list of layers 


// //function to add layer to Map 
// var addBaseLayer = function(keyName){
//   var layerItem = layerProperties[keyName]
//   Map.addLayer({
//     eeObject: layerItem.layer, 
//     visParams: {palette: layerItem.palette,
//                 min: layerItem.minMax[0], 
//                 max: layerItem.minMax[1], 
//     },
//     name: keyName,
//     shown: false})
// }; 
//function to make checkboxes 
var checkbox = function (layerObject, index) {
 print(layerObject)
  var layer = layerObject.layer
 // addBaseLayer(layer);
 //var layerItem = layerObject.layer
  var cb = ui.Checkbox({
    label: layer.name, 
    value: 0, 
    style:{
     margin: '0px',
      padding: '4px',
      fontSize: '10px'
    }
  })
  cb.onChange(function(checked) {
  // Shows or hides the first map layer based on the checkbox's value.
   //if checked 
   Map.layers().get(index).setShown(checked)
  /*if(checked) {
    print(Map.layers())
   //Map.layers().insert(1,layer)//add(image)
} else {
  print(checked)
  print(Map.layers())
  Map.layers().set(1, {visParams:false})
  Map.layers().remove(1);
}
   
*/    
    //Map.layers().get(index).setShown(checked);
//
//addButton.onClick(function() {
//  var toAdd = ui.Map.Layer({eeObject: image, 
//  name:'from button',
//  visParams: {palette: ['blue', 'green', 'white']}
//  })
//  Map.layers().set(0,toAdd)//add(image)
 // print(Map.layers())
 // print(image.getMap())
 
//})    
    
    
  //print(checked)
  }); 
  return cb
}; 

//add a legend function as a method to precip 

function ColorBar(palette) {
  return ui.Thumbnail({
    image: ee.Image.pixelLonLat().select(0),
    params: {
      bbox: [0, 0, 1, 0.1],
      dimensions: '200x20',
      format: 'png',
      min: 0,
      max: 1,
      palette: palette,
    },
    style: {stretch: 'horizontal', margin: '0px 8px'},
  });
}

var Thermal = ['042333', '2c3395', '744992', 'b15f82', 'eb7958', 'fbb43d', 'e8fa5b']

var barLegend = function (obj) {
//  var labelPanel = ui.Panel(
print(obj.layer)
var palette= obj.layer.visParams.palette
    var low = obj.layer.visParams.min
    var high = obj.layer.visParams.max
    var mid = ( low+high)/2
    var labelPanel = ui.Panel(
      [
        ui.Label(low, {margin: '4px 8px',textAlign: 'left',stretch: 'horizontal'}),
        ui.Label(mid, {margin: '4px 8px', textAlign: 'center',stretch: 'horizontal'}),
        ui.Label(high, {margin: '4px 8px',textAlign: 'right',stretch: 'horizontal'})
      ], 
      ui.Panel.Layout.flow('horizontal'),
      
  //    labelPanel.add(ui.Label(obj.units))
      {width: '230px', position: 'top-center'}
      );
      
  var    unitlabel =(ui.Label(obj.units))
  return ui.Panel([ColorBar(palette), labelPanel])
}

//ayerProperties.Slope.legend = barLegend //function() {
//  barLegend
//}
var userPanel = ui.Panel(ui.Label('Add to Report'))

userPanel.add(checkbox(layerProperties.Precipitation, 1))
userPanel.add(checkbox(layerProperties.Imperviousness, 0))
Map.add(userPanel)






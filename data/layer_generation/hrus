/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var roi = ee.FeatureCollection("projects/ee-swhm/assets/production_feature_collections/PugetSoundWA"),
    image2 = ee.Image("projects/ee-swhm/assets/production_layers/Imperviousness"),
    imageCollection = ee.ImageCollection("USDA/NASS/CDL"),
    soils = ee.Image("projects/ee-swhm/assets/production_layers/Soils"),
    image5 = ee.Image("users/cnilsen/soilRasterExport2band"),
    elevation = ee.Image("USGS/SRTMGL1_003"),
    image = ee.Image("projects/ee-swhm/assets/production_layers/Hydrologic_Response_Units"),
    geometry = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-122.84115364385804, 47.96871330055091],
          [-122.84115364385804, 47.82138882276389],
          [-121.86337044073304, 47.82138882276389],
          [-121.86337044073304, 47.96871330055091]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Import the landcover module
var landcover = require('users/stormwaterheatmap/apps:data/layer_generation/landcover.js').landcover;

// Define cropland based on the USDA/NASS/CDL image
var cropland = ee.Image('USDA/NASS/CDL/2020').select('cultivated').eq(2);

// Define the HSPF land cover types and remap them
var hspf_land_cover = landcover.remap(
  [0, 1, 2, 3, 4, 5, 6, 7],
  [9, 2, 2, 0, 2, 3, 5, 5]
);

// Mask out water or NA areas
var hspf_mask = landcover.neq(0).or(hspf_land_cover.eq(3));
hspf_land_cover = hspf_land_cover.updateMask(hspf_mask);

// Assign cropland values to HSPF land cover
hspf_land_cover = hspf_land_cover.where(cropland, 1);

// Add the HSPF land cover layer to the map
Map.addLayer(hspf_land_cover, {}, 'hspf lc', 0);

// Add the soils layer to the map
Map.addLayer(soils, {}, 'soils', 0);

// Calculate imperviousness based on land cover types
var imperv = landcover.gte(6).multiply(100).float();
exports.imperviousness = imperv;

// Create a soil mask
var soilmask = image5.select('NRCS').eq(0);

// Replace specific values in the soils image
var newimgreplace = soils.eq(3).and(soilmask);
soils = soils.where(newimgreplace, 1);

// Calculate slope using elevation data
var slope = ee.Terrain.slope(elevation);
Map.addLayer(slope, {}, 'slope', 0);

// Define a circular kernel for neighborhood operations
var k = ee.Kernel.circle({ radius: (400 / 3.2808), units: 'meters' });

// Calculate median slope within the kernel
var slope = ee.Terrain.slope(elevation).reduceNeighborhood({ reducer: ee.Reducer.median(), kernel: k });

// Set thresholds for slope
var thresholds = ee.Image([5.0, 15, 100]);

// Count the number of zones based on slope thresholds
var zones = slope.gt(thresholds).reduce('sum');

// Calculate soil complexity
var soilcomp = soils.selfMask().subtract(ee.Image(1)).multiply(100);

// Modify land cover complexity based on HSPF land cover values
var hspf_land_cover = hspf_land_cover.where(hspf_land_cover.eq(3), 0);
var lccomp = hspf_land_cover.multiply(10);
soilcomp = soilcomp.where(hspf_land_cover.eq(5), 200);

// Replace roof tops with flat slope
var slopecomp = zones.where(landcover.eq(7), 0);
Map.addLayer(slopecomp, {}, 'slopecomp', 0);

// Combine soil complexity, land cover complexity, and slope complexity, and mask out water areas
var hrus = soilcomp.add(lccomp).add(slopecomp).mask(soils.neq(4));

// Define the HRU mask
var hruMask = landcover.neq(0).and(landcover.neq(5));
Map.addLayer(hruMask);

hrus = hrus.updateMask(hruMask)
Map.addLayer(hrus)
var hrus = hrus.addBands(ee.Image(1).rename('count'))
//count up individual hrus 
var counthrus = hrus.reduceRegion({reducer:ee.Reducer.countDistinct(),
  geometry:geometry,scale:30, maxPixels:1e11
})

//count up individual hrus  `
var listHrus = hrus.reduceRegion({reducer:ee.Reducer.count().group(0),
  geometry:geometry,scale:30, maxPixels:1e11
})
print(listHrus.get('groups'))

exports.hrus = hrus 
exports.soils = soils 
exports.hspf_land_cover = hspf_land_cover 
exports.slope = slope 
exports.slope_zone = zones 

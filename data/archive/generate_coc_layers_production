/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var PugetSound = ee.FeatureCollection(
  "projects/ee-stormwaterheatmap/assets/PugetSound_WA"
);
/***** End of imports. If edited, may not auto-convert in the playground. *****/

var predictors = require("users/stormwaterheatmap/coc_layers:scaled_predictors");
predictors = predictors.scaled_predictors;

var traffic_band = predictors.select("sqrt_traffic");
Map.addLayer(traffic_band);

var pred_bands = predictors.bandNames();
print("band names", pred_bands);
//intercept,      devage2,     grass,     paved,  pm25_na,  sqrt_CO2_road,  traffic

var clamped_img_max = ee.Image.constant(
  [
    //"0_intercept":
    99,
    //"devAge2":
    3,
    //"grass":
    3,
    //"paved":
    3,
    //"pm25_na":
    3,
    //"sqrt_CO2_road":
    3,
    //"traffic":
    3,
  ]

  //1.59
);

var predictors = predictors.where(
  predictors.gt(clamped_img_max),
  clamped_img_max
);

var soils = ee.Image("users/stormwaterheatmap/soilsunmask5m");
var water_mask = ee.Image(0).blend(soils.neq(4).byte());


/* List of Equations for pollutant concentrations 
* COPPER:
* ln(Copper) = 2.332 - 0.179*rain + 0.375*summer + 0.427*sqrt_traffic + 0.457*devAge2 + epsilon
* (rain = 21-day cumulative rainfall, standardized)
*  
* TSS:
* ln(TSS) = 10.294 + 0.159*rain + 0.381*sqrt_traffic + 0.320*devAge2 + epsilon
* (rain = 1-day cumulative rainfall, standardized)
*  
* TKN:
* ln(TKN) = 6.618 - 0.180*rain + 0.554*summer + 0.232*sqrt_traffic + 0.220*devAge2 + epsilon
* (rain = 14-day cumulative rainfall, standardized)
*  
* Total Zinc:
* ln(total Zinc) = 4.10 + 0.36 * sqrt_traffic + 0.69 * paved
*  
* Phosphorus:
* ln(P) = 4.554 - 0.147*rain + 0.507*summer + 0.299*sqrt_CO2_road + epsilon
* (rain = 21-day cumulative rainfall, standardized)
|coc| intercept      | devage2 | grass | paved| pm25_na|  sqrt_CO2_road |  sqrt traffic|
| ----------- | ----------- | ----------- | -----------| ----------- | -----------| ----------- | 
|Copper| 2.332      | 0.457       | 0          | 0        | 0           | 0             | 0.427        | 
|TSS   | 10.294     | 0.320       | 0          | 0        | 0           | 0             | 0.381        |
|TKN   | 6.618      | 0.220       | 0          | 0        | 0           | 0             | 0.232        | 
|Zinc  | 4.10       | 0           | 0          | 0.69     | 0           | 0             | 0.36         |
|P     | 4.554      | 0.299       | 0          | 0        | 0           | 0.507         | 0            |
*/ 

var regression_coefficients = {
  // intercept,      devage2,     grass,
  //paved,  pm25_na,  sqrt_CO2_road,  sqrt traffic
  copper: [2.332, 0.457, 0, 0, 0, 0.427, 0],
    tss: [10.294, 0.320, 0, 0, 0, 0, 0.381],
    tkn: [6.618, 0.220, 0, 0, 0, 0, 0.232],
    zinc: [4.10, 0, 0, 0.69, 0, 0, 0.36],
    p: [4.554, 0.299, 0, 0, 0, 0.507, 0]};
  

var bandNames = [
  "intercept",
  "devage2",
  "grass",
  "paved",
  "pm25_na",
  "sqrt_CO2_road",
  "traffic",
];

/**
 * Applies a convolution to a scaled and centered image. Clamps values to
 * +/- 3 standard deviations (assuming dataset is scaled by sd)
 * Takes a coc name and generates a single band image.
 */
function convolve_clamp_predictors(image) {
  var convolved_predictors = image.focal_mean(); //.//unmask().
  // reduceNeighborhood({
  //     skipMasked: true,
  //     inputWeight: "min",
  //     reducer: ee.Reducer.mean(),
  //     kernel: ee.Kernel.gaussian({
  //         radius: 200,
  //         sigma: 70,
  //         units: 'meters'
  //     })
  // })

  var convolved_clamped = convolved_predictors.where(
    convolved_predictors.gt(clamped_img_max),
    clamped_img_max
  );

  //.clamp(-2, 2) //clamp to 3 standard deviations
  return convolved_clamped;
}

/**
 * Main function. Generates heatmap layer for a specific coc.
 * Takes a coc name and generates a single band image.
 */
function generate_coc_layer(coc_name, predictor_image) {
  // var regression_dict = ee.Dictionary.fromLists({
  //     keys: pred_bands,
  //     values: regression_coefficients[coc_name]
  // })

  //Get the regression parameters
  var coc_parameters = ee.Image.constant(
    regression_coefficients[coc_name]
  ).rename(bandNames);

  // calculate the concentration
  var coc_ug_L_scaled = coc_parameters
    .multiply(predictor_image)
    .reduce("sum")
    .rename(coc_name + "_concentration_ug_per_L");

  //transform back from log values
  var coc_ug_L = coc_ug_L_scaled.exp(); //.setDefaultProjection({
  //     crs: 'EPSG:3857'
  // }).reduceResolution({
  //     reducer: ee.Reducer.mean(),
  //     bestEffort: true
  // }).reproject({
  //     scale: 30,
  //     crs: 'EPSG:3857'
  // }) //reproject at a 30m scale to smooth out image

  return coc_ug_L;
}

var convolved_clamped = convolve_clamp_predictors(predictors);
var copper = generate_coc_layer("copper", convolved_clamped);
var p = generate_coc_layer("p", convolved_clamped);
var tss = generate_coc_layer("tss", convolved_clamped);
var tkn = generate_coc_layer("tkn", convolved_clamped);
var zinc = generate_coc_layer("zinc", convolved_clamped);

var all_cocs = copper.addBands(p).addBands(tss).addBands(zinc).addBands(tkn); //.addBands(zinc).addBands(tkn)
print(all_cocs.toDictionary());

var zinc_tkn = zinc.addBands(tkn);

var palettes = require("users/gena/packages:palettes");
var pal = palettes.kovesi.linear_bgyw_15_100_c67[7];

exports.convolved_predictors = convolved_clamped;

Export.image.toAsset({
  image: all_cocs,
  region: PugetSound,
  scale: 30,
  maxPixels: 1e13,
  description: "all_cocs_feb22",
  assetId: "all_cocs_feb22",
});
Export.image.toAsset({
  image: zinc_tkn,
  region: PugetSound,
  scale: 30,
  maxPixels: 1e13,
  description: "zinc_tkn_jan22",
  assetId: "zinc_tkn_jan22",
});

// Apply a non-linear stretch to the population data for visualization.
function colorStretch(image) {
  return image.log();
}
var PugetSound_mask = ee.Image(
  "projects/ee-stormwaterheatmap/assets/PugetSoundMask"
);
//Map.addLayer(all_cocs.mask(PugetSound_mask))
print(all_cocs);

var bands = all_cocs.bandNames();
var numBands = bands.length().getInfo();
for (var i = 0; i < numBands; i++) {
  print(i);
  var nm = bands.get(i).getInfo();
  var img = all_cocs.select([nm]);
  export_img(img, nm);
}

function export_img(img, nm) {
  Export.image.toCloudStorage({
    image: img.toFloat(),
    description: nm, //removes spaces
    bucket: "swhm-image-exports",
    scale: 30,
    maxPixels: 1e13,
    crs: "EPSG:3857",
    region: PugetSound,
    fileNamePrefix: nm,
    fileFormat: "GeoTIFF",
    formatOptions: {
      cloudOptimized: true,
    },
  });
}
